var documenterSearchIndex = {"docs":
[{"location":"run_rabbit/#Run-RABBIT","page":"Run RABBIT","title":"Run RABBIT","text":"","category":"section"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"RABBIT can be run either in Julia REPL or CLI. ","category":"page"},{"location":"run_rabbit/#Julia-REPL","page":"Run RABBIT","title":"Julia REPL","text":"","category":"section"},{"location":"run_rabbit/#Load-package","page":"Run RABBIT","title":"Load package","text":"","category":"section"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"For example, to use MagicImpute for genotype imputation, run","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"using MagicImpute","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"For parallel computation of n processes (1 main + n-1 workers) at chromosome level, run","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"using Distributed\naddprocs(n)\n@everywhere using MagicImpute\nusing MagicImpute","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"Set n <= #chromosomes and n < number of logical processors in the computer.","category":"page"},{"location":"run_rabbit/#Run-function","page":"Run RABBIT","title":"Run function","text":"","category":"section"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"For genetic analysis, there are always two required inputs: genofile and pedinfo. The following is an overview of the key functions:","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"magicsimulate(\"founderhaplo.vcf.gz\",\"ped.csv\")\nmagicfilter(\"geno.vcf.gz\",\"ped.csv\")\nmagiccall(\"geno.vcf.gz\",\"ped.csv\")\nmagicmap(\"geno.vcf.gz\",\"ped.csv\")\nmagicimpute(\"geno.vcf.gz\",\"ped.csv\"; mapfile=\"outstem_magicmap_construct_map.csv.gz\")\nmagicreconstruct(\"geno.vcf.gz\",\"ped.csv\")","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"For genotype-phenotype mapping, there are also two required inputs: ancestryfile exported by magicreconstruct and phenofile.","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"magicscan(\"magicancestry.csv.gz\",\"pheno.csv\")","category":"page"},{"location":"run_rabbit/#Help","page":"Run RABBIT","title":"Help","text":"","category":"section"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"To get help for a function, for example, magicimpute, run","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"?magicimpute","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"See section Pipeline  for the description of each step and see section API for all public functions. ","category":"page"},{"location":"run_rabbit/#CLI","page":"Run RABBIT","title":"CLI","text":"","category":"section"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"The RABBIT CLI is a collection of main function files; each file is a wrapper of the corresponding julia function using ArgParse.jl. Most functions for data analysis have CLI, but all visualization functions such as MagicBase.plotcondprob do not have.","category":"page"},{"location":"run_rabbit/#Run-main-function-file","page":"Run RABBIT","title":"Run main function file","text":"","category":"section"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"All main function files such as rabbit_magicimpute.jl and rabbit_magicmap.jl are located in the download RABBIT repository folder. To run a main function file in a command shell, change into work directory including input files, and run","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"path/to/bin/julia.exe path/to/RABBITCLI/src/rabbit_function.jl -g geno.vcf.gz -p ped.csv","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"We will assume that the paths to julia.exe and the main function file have been added in the platform environmental variable PATH.","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"julia rabbit_function.jl -g geno.vcf.gz -p ped.csv","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"The following is an overview of the key main function files:","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"julia rabbit_magicfilter.jl -g geno.vcf.gz -p ped.csv\njulia rabbit_magiccall.jl -g geno.vcf.gz -p ped.csv\njulia rabbit_magicmap.jl -g geno.vcf.gz -p ped.csv\njulia rabbit_magicimpute.jl -g geno.vcf.gz -p ped.csv --mapfile outstem_magicmap_construct_map.csv.gz\njulia rabbit_magicreconstruct.jl -g geno.vcf.gz -p ped.csv\njulia rabbit_magicscan.jl -g ancestry.csv.gz -p pheno.csv","category":"page"},{"location":"run_rabbit/#Help-2","page":"Run RABBIT","title":"Help","text":"","category":"section"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"To get help for each main function file, run","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"julia rabbit_function.jl -h","category":"page"},{"location":"run_rabbit/","page":"Run RABBIT","title":"Run RABBIT","text":"See section CLI for all help documents.","category":"page"},{"location":"pipeline/s0_pipeline_overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"pipeline/s0_pipeline_overview/","page":"Overview","title":"Overview","text":"This section describes each step of the RABBIT pipeline, illustrated by a simulated connected multiparental population. See pipeline.jl for the collection of julia code blocks on this page. See pipeline.cmd for window CMD or pipeline.sh for Unix/Linux shell. See \"RABBITDocs\\docs\\src\\pipeline\" for all the scripts and output files. ","category":"page"},{"location":"pipeline/s0_pipeline_overview/","page":"Overview","title":"Overview","text":"Pages = [\"s1_magicsimulate.md\",\n    \"s2_magicfilter.md\",\n    \"s3_magiccall.md\",\n    \"s4_magicmap.md\",\n    \"s5_magicimpute.md\",\n    \"s6_magicreconstruct.md\",\n    \"s7_magicscan.md\",\n]","category":"page"},{"location":"pipeline/s0_pipeline_overview/","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"pipeline/s0_pipeline_overview/","page":"Overview","title":"Overview","text":"info: Pipeline\nSkip MagicCall and MagicMap if a reliable markermap (physical or genetic) is available.\nPerform MagicCall for sequence data in heterozygous mapping populations.","category":"page"},{"location":"pipeline/s0_pipeline_overview/","page":"Overview","title":"Overview","text":"warning: Code for CLI\nCode blocks for CLI start with julia rabbit_funcname.jl, assuming  that the paths to julia.exe and the main function file have been added in the platform environmental variable PATH. See section \"Guide/Run julia in CLI\".","category":"page"},{"location":"rabbit_api/#RABBIT-interface-for-julia-REPL","page":"API","title":"RABBIT interface for julia REPL","text":"","category":"section"},{"location":"rabbit_api/","page":"API","title":"API","text":"Documentation for  RABBIT's public interface.","category":"page"},{"location":"rabbit_api/#Contents","page":"API","title":"Contents","text":"","category":"section"},{"location":"rabbit_api/","page":"API","title":"API","text":"Pages = [\"rabbit_api.md\"]","category":"page"},{"location":"rabbit_api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"rabbit_api/","page":"API","title":"API","text":"Pages = [\"rabbit_api.md\"]","category":"page"},{"location":"rabbit_api/#Public-Interface","page":"API","title":"Public Interface","text":"","category":"section"},{"location":"rabbit_api/","page":"API","title":"API","text":"Pedigrees.Pedigree\nPedigrees.orderped\nPedigrees.readped\nPedigrees.saveped\nPedigrees.plotped\nMagicPrior.magicorigin\nMagicPrior.magicprior\nMagicBase\nMagicBase.JuncDist\nMagicBase.DesignInfo\nMagicBase.MagicPed\nMagicBase.formmagicped\nMagicBase.readmagicped\nMagicBase.savemagicped\nMagicBase.plotmagicped\nMagicBase.MagicGeno\nMagicBase.formmagicgeno\nMagicBase.savemagicgeno\nMagicBase.savegenodata\nMagicBase.MagicAncestry\nMagicBase.readmagicancestry\nMagicBase.savemagicancestry\nMagicBase.parsedesign\nMagicBase.parsebreedped\nMagicBase.resetmap\nMagicBase.rabbitped_mma2jl\nMagicBase.rabbitgeno_mma2jl\nMagicBase.arrayfile2vcf\nMagicBase.hapmap2vcf\nMagicBase.merge_vcffiles\nMagicBase.merge_arrayfiles\nMagicBase.merge_pedfiles\nMagicBase.array_extract_pedfile\nMagicBase.vcf_pad_samples\nMagicBase.vcf_extract_pedfile\nMagicBase.vcffilter\nMagicBase.pedfile_designcode2ped\nMagicBase.plotcondprob\nMagicBase.animcondprob\nMagicBase.plotmarkermap\nMagicBase.plotrecombreak\nMagicSimulate\nMagicSimulate.simfhaplo\nMagicSimulate.magicsimulate\nMagicFilter\nMagicFilter.magicfilter\nMagicFilter.magicfilter!\nMagicCall\nMagicCall.magiccall\nMagicMap\nMagicMap.magicmap\nMagicImpute\nMagicImpute.magicimpute\nMagicImpute.magicimpute!\nMagicReconstruct\nMagicReconstruct.magicreconstruct\nMagicReconstruct.magicreconstruct!\nMagicScan\nMagicScan.magicscan","category":"page"},{"location":"rabbit_api/#Pedigrees.Pedigree","page":"API","title":"Pedigrees.Pedigree","text":"Pedigree{T}\n\nimmutable struct that stores information of a pedigree. See also readped.\n\nThe Pedigree fields include nfounder, generation, member, gender, mother, and father. The mothers and fathers of founders must be denoted by 0.\n\nPedigree(nfounder,member,mother,father,gender,generation)\n\ninner constructor. The gender of each member must be \"notapplicable\", \"female\", or \"male\".\n\nPedigree(df::DataFrame)\n\nextenral constructor. The dataframe must have columns member, mother, and father. A gender column is optional. The constructor calculates the generation for each member, which is the max path length from founders to the member. The constructor orders pedigree by calling orderped.\n\n\n\n\n\n","category":"type"},{"location":"rabbit_api/#Pedigrees.orderped","page":"API","title":"Pedigrees.orderped","text":"orderped(ped::Pedigree)\n\norder pedigree members so that parents always come first.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#Pedigrees.readped","page":"API","title":"Pedigrees.readped","text":"readped(pedfile::AbstractString, delim=',', commentstring=\"##\")\n\nread a pedigree from pedfile, ignoring the lines beginning with commentstring.\n\nThe pedigree file  must contain columns: member, mother, and father. The mothers and fathers of founders must be denoted by 0. The value in the optional gender column must  be \"notapplicable\", \"female\" or \"male\".\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#Pedigrees.saveped","page":"API","title":"Pedigrees.saveped","text":"saveped(filename::AbstractString,ped::Pedigree)\n\nsave pedigree into a csv file. The file contains columns: member, mother, father, gender, generation.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#Pedigrees.plotped","page":"API","title":"Pedigrees.plotped","text":"plot(ped::Pedigree)\n\nplot a pedigree. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicPrior.magicorigin","page":"API","title":"MagicPrior.magicorigin","text":"magicorigin(pedigree::Pedigree; kwargs...)\n\ncalculate expected ancestral probabilities and junction densities  in pedigree.\n\nKeyword Argument\n\nmemberlist::Union{Nothing,AbstractVector}=nothing: a list of pedigree members. By default, memberlist contains the last pedigree member.\n\nisautosome::Bool=true: autosome rather than sex chromosome,\n\nisconcise::Bool=false: if false, calculate quantities: phi12, R(a)(or R^m), R(b)(or R^p), ρ, J1112, J1121, J1122, J1211, J1213, J1222, J1232. If true, calculate only the first 4 quantities.\n\nisfglexch::Bool=false: if true, assume that  founder genotype lables (FGLs) are exchangeable.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicPrior.magicprior","page":"API","title":"MagicPrior.magicprior","text":"magicprior(pedigree::Pedigree,founderfgl::AbstractMatrix; kwargs...)\n\ncalculate prior distribution of recombination breakpoints in pedigree. \n\nFor each pedigree member in memberlist, return continutuous Markov process parameter values: initial probability vector and rate matrix under three models \"depmodel\", \"indepmodel\", and \"jointmodel\", a relationship between the two ancestral processes along each of two homologous chromosomes.\n\nPosition arguments\n\npedigree::Pedigree: pedigree struct. \n\nisfounderinbred::Bool: if true, founders are inbred, and otherwise outbred.\n\nKeyword Arguments\n\nmemberlist::Union{Nothing,AbstractVector}=nothing: a list of pedigree members.\n\nisautosome::Bool=true: autosome rather than sex chromosome,\n\nisfglexch::Bool=false: not assume that  founder genotype lables (FGLs) are exchangeable.\n\nisconcise::Bool=false: if isconcise is true, the parameter values for \"jointmodel\" are not calculated.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase","page":"API","title":"MagicBase","text":"MagicBase\n\na package for basic data structures and functions for genetic analysis in connected multiparental populations. \n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicBase.JuncDist","page":"API","title":"MagicBase.JuncDist","text":"JuncDist\n\nstruct that stores junction information, that is, the prior distribution of recombination breakpoints. \n\n\n\n\n\n","category":"type"},{"location":"rabbit_api/#MagicBase.DesignInfo","page":"API","title":"MagicBase.DesignInfo","text":"DesignInfo\n\nmutable struct that stores design information for a subpopulation. See also parsedesign. \n\nFields\n\ndesigntype::Symbol: type of the subpopulation design. It must be :commoncross, :breedcross, :juncdist, or :matescheme. \n\nfounders::Union{Nothing,AbstractVector}: founders for the subpopulation. \n\ndesigncode::Union{Nothing,AbstractString}: string code for the design. \n\npedigree::Union{Nothing, Pedigree}: pedigree for the design \n\nmatescheme::Union{Nothing, MateScheme}: mate schemes for the design\n\njuncdist::Union{Nothing, JuncDist}: junctdist for the design. \n\n\n\n\n\n","category":"type"},{"location":"rabbit_api/#MagicBase.MagicPed","page":"API","title":"MagicBase.MagicPed","text":"MagicPed\n\nmutable struct that stores pedigree information\n\nMagicPed(designinfo,founderinfo,offspringinfo)\n\ninner constructor. See also readmagicped.\n\nFields\n\ndesigninfo::Union{Nothing, Dict{String,DesignInfo},Pedigree}: specifies population designinfo. A designinfo::Pedigree specifies the designinfo in pedigree. See also Pedigree.  A designinfo::Dict{String,DesignInfo} specifies designinfo for each subpopulation.  See also DesignInfo. \n\nfounderinfo::DataFrame: founder information. \n\noffspringinfo::DataFrame: offspring information. The column names are [:individual,:member,:ishomozygous,:isfglexch,:gender]. The :ishomozygous column specifies if the individual is homozygous. If design is set by juncdist::JuncDist, the :member column is set to \"juncdist\". If design is set by a string designcode::AbstractString, the :member column is set to the last non-male member of the pedigree. If design is set by designinfo::Pedigree, the :member column is associated to the :member column of the pedigree.\n\n\n\n\n\n","category":"type"},{"location":"rabbit_api/#MagicBase.formmagicped","page":"API","title":"MagicBase.formmagicped","text":"formmagicped(designinfo, popsize)\n\nform magicped::MagicPed form magicped for a non-divided pouplation of popsize. \n\n\n\n\n\nformmagicped(pedigree, popsize)\n\nform magicped::MagicPed from pedigree and popsize. \n\n\n\n\n\nformmagicped(designcode, popsize)\n\nform magicped::MagicPed from designcode and popsize. \n\n\n\n\n\nformmagicped(juncdist, popsize)\n\nform magicped::MagicPed from juncdist and popsize. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.readmagicped","page":"API","title":"MagicBase.readmagicped","text":"readmagicped(pedfile; commentstring=\"##\",workdir=pwd())\n\nread a CSV formatted pedfile and return magicped::MagicPed. \n\nPositional arguments\n\npedfile::AbstractString: saves the pedigre information: designinfo and offspringinfo.  The designinfo can be provided in three formats: pedigree, mating design code,  and junction distribution. \n\nKeyword arguments\n\ncommentstring::AbstractString=\"##\": the lines beginning with commentstring are ignored in pedfile.\n\nworkdir::AbstractString=pwd(): directory for reading pedfile.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.savemagicped","page":"API","title":"MagicBase.savemagicped","text":"savemagicped(sink,magicped; delim=',',workdir=pwd())\n\nsave magicped into sink. see [readmagicped] for reading saved output file.\n\nPositional arguments\n\nsink::Union{IO,AbstractString}: output file or IO.\n\nmagicped::MagicPed: a struct for storing pedidgree info.\n\nKeyword arguments\n\ndelim::AbstractChar=',': delimitor character.\n\nworkdir::AbstractString=pwd(): directory for reading genfile and pedfile.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.plotmagicped","page":"API","title":"MagicBase.plotmagicped","text":"plotmagicped(magicped; kwargs...)\n\nplot magicped. \n\nKeyword arguments\n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise outbred.\n\noutfile::Union{Nothing,AbstractString}=nothing: if nothing, not save the plot, and otherwise save to outfile. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.MagicGeno","page":"API","title":"MagicBase.MagicGeno","text":"MagicGeno\n\nmutable struct that stores genotypic data\n\nMagicGeno(magicped,markermap,foundergeno,offspringgeno,deletion,correction)\n\ninner constructor. See also formmagicgeno.\n\nFields\n\nmagicped::MagicPed: breeding pedigree information. See also MagicPed.\n\nmarkermap::Vector{DataFrame}: marker map for each chromosome. markermap[c] gives the markermap of chromosome c.\n\nfoundergeno::Vector{Matrix}: genotypic data in founders. foundergeno[ch][m,i] gives the genotype of founder i at marker m of chromosome ch.\n\noffspringgeno::Vector{Matrix}: genotypic data in offspring. offspringgeno[ch][m,i]  gives the genotype of offspring i at marker m of chomosome ch.\n\nmisc::Dict{String, DataFrame}: contains information such as (1) \"deletion\" dataframe for markers that were removed from markermap, (2) \"correction\" dataframe for parental error correction.\n\n\n\n\n\n","category":"type"},{"location":"rabbit_api/#MagicBase.formmagicgeno","page":"API","title":"MagicBase.formmagicgeno","text":"formmagicgeno(genofile, nfounder;\n    isfounderinbred, formatpriority, isphysmap, recomrate, commentstring)\n\nform magicgeno::MagicGeno from the genofile and the number nfounder of founders. Assume that founders' columns are on the left of offspring columns.\n\n\n\n\n\nformmagicgeno(genofile, pedinfo;\n    formatpriority, isphysmap, recomrate, commentstring)\n\nform magicgeno from the genofile and the pedigree information pedinfo.\n\nPositional arguments\n\ngenofile::AbstractString: genotypic data file with extension \".vcf\" or \".vcf.gz\".\n\npedinfo::AbstractString: designcode or pedfile\n\npedfile: See readmagicped for the format of a pedigree file.\ndesigncode: a string designcode for a breeding population.  See parsedesign for details.\n\nKeyword arguments\n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise outbred.\n\nformatpriority::AbstractVector=[\"AD\",\"GT\"]: the priority of genotype  formats when parasing input vcf genofile.  \n\nisphysmap::Bool=false: if ture, transform physical map into genetic map using recomrate and overwrite the exist genetic map.  If false, keep input physical and/or genetic map.\"\n\nrecomrate::Real=1.0, average recombation rate in cM per Mbp. Valid only if isphysmap = true.\n\ncommentstring::AbstractString=\"##\": the lines beginning with commentstring are ignored in genofile or pedfile.\n\nworkdir::AbstractString=pwd(): directory for reading genofile and pedfile.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.savemagicgeno","page":"API","title":"MagicBase.savemagicgeno","text":"savemagicgeno(outfile,magicgeno,workdir=pwd(),delim=',')\n\nsave genotypic data of magicgeno::MagicGeno into outfile\n\nPositional arguments\n\noutfile::AbstractString: filename for saving results.\n\nmagicgeno::MagicGeno: a struct returned by formmagicgeno.\n\nKeyward arguments\n\nmissingstring::AbstractString = \"NA\": string for missing values workdir::AbstractString = pwd(): directory for writing outfile.\n\ndelim::AbstractChar=',': delimitor character\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.savegenodata","page":"API","title":"MagicBase.savegenodata","text":"savegenodata(outfile,magicgeno; missingstring=\"NA\",workdir=pwd(),delim=',')\n\nsave genotypic data of magicgeno::MagicGeno into outfile\n\nPositional arguments\n\noutfile::AbstractString: output genofile for saving genotypic data.\n\nmagicgeno::MagicGeno: a struct returned by formmagicgeno.\n\nKeyward arguments\n\nworkdir::AbstractString = pwd(): directory for writing outfile.\n\ndelim::AbstractChar=',': delimitor character\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.MagicAncestry","page":"API","title":"MagicBase.MagicAncestry","text":"MagicAncestry\n\nmutable struct that stores the results of haplotype reconstruction by magicreconstruct. \n\nMagicAncestry(magicped,markermap,foundergeno,statespace,\n    viterbipath, diploprob,genoprob,haploprob,loglike,misc)\n\ninner constructor. See also readmagicancestry.\n\nFields\n\nmagicped::MagicPed: breeding pedigree information. See also MagicPed.\n\nmarkermap::Vector{DataFrame}: marker map for each chromosome. markermap[c] gives the marker map of chromosome c. \n\nfoundergeno::Vector{Matrix}: haplotypes in founders. foundergeno[c][m,f] gives the founder f at marker m of chromosome c.\n\nstatespace::AbstractDict: definition of ancestral haplotype states corresponding to haploprob.\n\nviterbipath::Union{Nothing,Vector{Matrix}}: optimal state path obtained by the Viterbi algorithm. viterbipath[c][m,o] gives the ancestral diplotype state of offspring o at marker m for chromosome c.\n\ndiploprob::Union{Nothing,Vector{Vector{SparseArrays.SparseMatrixCSC}}}: marginal posterior probabilities for diplotypes. diploprob[c][o][m,s] gives the probability of offspring o at ancestral diplotype state s for marker m of chromosome c.\n\ngenoprob::Union{Nothing,Vector{Vector{SparseArrays.SparseMatrixCSC}}}: marginal posterior probabilities for genotypes. genoprob[c][o][m,s] gives the probability of offspring o at ancestral genotype state s for marker m of chromosome c.\n\nhaploprob::Union{Nothing,Vector{Vector{SparseArrays.SparseMatrixCSC}}}: marginal posterior probabilities for haplotypes. genoprob[c][o][m,s] gives the probability of offspring o at ancestral haplotype state s for marker m of chromosome c.\n\ninbredcoef::Union{Nothing,Vector{Matrix}}: realized inbreeding coefficients.  inbredcoef[c][m,o] gives the inbreeding coefficients at marker m of chromosome c in offpsring o. \n\nloglike::AbstractMatrix: loglike[c,o] gives the log likelihood for chromsome c of offspring o.\n\nmisc::Dict{String, DataFrame}: contains information such as (1) \"deletion\" dataframe for markers that were removed from markermap, (2) \"correction\" dataframe for parental error correction.\n\n\n\n\n\n","category":"type"},{"location":"rabbit_api/#MagicBase.readmagicancestry","page":"API","title":"MagicBase.readmagicancestry","text":"readmagicancestry(ancestryfile, workdir=pwd(),tempdirectory=tempdir())\n\nread ancestryfile in the directory workdir and return magicancestry::MagicAncestry. See MagicAncestry. \n\nPositional argument\n\nancestryfile: file storing magicancestry that is generated by savemagicancestry. It results from magicreconstruct.\n\nKeyward arguments\n\nworkdir::AbstractString = pwd(): directory for reading ancestryfile,\n\ntempdirectory::AbstractString=tempdir(): temparary directory. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.savemagicancestry","page":"API","title":"MagicBase.savemagicancestry","text":"savemagicancestry(outputfile,magicancestry,workdir=pwd())\n\nsave magicancestry into outputfile.\n\nPositional arguments\n\noutputfile::AbstractString: file for saving magicancestry. \n\nmagicancestry::MagicAncestry: a struct returned by magicreconstruct. \n\nKeyward arguments\n\nworkdir::AbstractString = pwd(): directory for writing outputfile.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.parsedesign","page":"API","title":"MagicBase.parsedesign","text":"parsedesign(designcode; kwargs...)\n\nparse string designcode into DesignInfo\n\nKeyword Argument\n\nfounders::Union{Nothing,AbstractVector}=nothing: a list of founders. \n\npopid=\"pop\": population id. \n\nfixed_nself::Integer=20: number of selfing generation for designcode in form of pedcode=>FIXED. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.parsebreedped","page":"API","title":"MagicBase.parsebreedped","text":"parsebreedped(pedfile; fixed_nself=10, outfile, commentstring=\"##\",workdir=pwd())\n\nconvert a breedped pedfile into the magicped outfile. The first 3 columns of breedpedfile must be sample, pedcode, nself.\n\nKeyword arguments\n\nfixed_nself::Integer = 20: interprete \"FIXED\" in nself column as 20. \n\ndelim::AbstractChar=',': text delimitor of input pedfile. \n\ncommentstring::AbstractString=\"##\": the lines beginning with commentstring are ignored in pedfile.\n\nworkdir::AbstractString=pwd(): directory for reading pedfile.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.resetmap","page":"API","title":"MagicBase.resetmap","text":"resetmap(vcffile,mapfile;\n    missingstring, commentstring, outstem, workdir)\n\nexports a new vcf file with marker map replaced with mapfile. \n\nPositional arguments\n\nvcffile::AbstractString: genotypic data file with extension \".vcf\" or \".vcf.gz\".\n\nmapfile::AbstractString: file for marker map, it can either be in VCF format or in CSV format.   For CSV-format, it must contain at least five columns: marker, linkagegroup, poscm, physchrom, physposbp.   The values are represented by missingstring. \n\nKeyword arguments\n\nmissingstring::AbstractString=\"NA\": string representing missing value. \n\ncommentstring::AbstractString=\"##\": the lines beginning with commentstring are ignored in vcffile or mapfile.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\": stem of output filenames.\n\nworkdir::AbstractString=pwd(): directory for reading genfile and pedfile.    \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.rabbitped_mma2jl","page":"API","title":"MagicBase.rabbitped_mma2jl","text":"rabbitped_mma2jl(mmapedfile; kwargs...)\n\nconvert input pedfile of Mathematica-version RABBIT into pedfile for Julia-version RABBIT.\n\nkeyword arguments\n\nishomozygous::Bool = false: if true, offspring is homozygous. \n\nisfglexch::Bool = false: if true, offspring is produced with rand parent ordering.\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\noutfile::AbstractString = \"outstem_ped.csv\": output filename.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.rabbitgeno_mma2jl","page":"API","title":"MagicBase.rabbitgeno_mma2jl","text":"rabbitgeno_mma2jl(mmagenofile; kwargs...)\n\nconvert input genofile of Mathematica-version RABBIT into genofile for Julia-version RABBIT. \n\nkeyword arguments\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\noutfile::AbstractString = \"outstem_geno.vcf.gz\": output filename.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.arrayfile2vcf","page":"API","title":"MagicBase.arrayfile2vcf","text":"arrayfile2vcf(arrayfile; keyargs...)\n\nextract pedfile from arrayfile. Work only for a non-subdivided population.  \n\nPositional arguments\n\narrayfile::AbstractString: SNP array genofile. \n\nKeyword arguments\n\ndelmultiallelic::Bool = true,: if true, delete markers with #alleles >= 3. \n\ndelim= \",\": text delimiter. \n\noutstem::AbstractString=\"outstem\": stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\nlogfile::Union{Nothing,AbstractString,IO}= outstem*\"_arrayfile2vcf.log\": log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.hapmap2vcf","page":"API","title":"MagicBase.hapmap2vcf","text":"hapmap2vcf(hapmapfile; keyargs...)\n\nconvert from a hapmap genofile into a vcf genofile. \n\nPositional arguments\n\nhapmapfile::AbstractString: hapmap genofile. \n\nKeyword arguments\n\ndelmultiallelic::Bool = true,: if true, delete markers with #alleles >= 3. \n\ndelim= \",\": text delimiter. \n\nmissingallele::AbstractString=\"-\": string for missing allele\n\noutstem::AbstractString=\"outstem\": stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\nlogfile::Union{Nothing,AbstractString,IO}= outstem*\"_arrayfile2vcf.log\": log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.merge_vcffiles","page":"API","title":"MagicBase.merge_vcffiles","text":"merge_vcffiles(vcffiles; outstem, workdir)\n\nmerge vcffiles into a single vcf genofile. \n\nPositional arguments\n\nvcffiles::AbstractVector: a list of vcf genofile. \n\nKeyword arguments\n\noutstem::AbstractString=\"outstem\": stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.merge_arrayfiles","page":"API","title":"MagicBase.merge_arrayfiles","text":"merge_arrayfiles(arrayfiles; outstem, workdir)\n\nmerge arrayfiles into a single SNP array genofile. \n\nPositional arguments\n\narrayfiles::AbstractVector: a list of SNP array genofile. \n\nKeyword arguments\n\nmissingallele::AbstractString = \"-\": string for missing allele. \n\noutstem::AbstractString=\"outstem\": stem of output filename.\n\noutext::AbstractString=\".csv.gz\": extension of output file.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\nlogfile::Union{Nothing,AbstractString,IO}= outstem*\"_merge_arrayfiles.log\": log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.merge_pedfiles","page":"API","title":"MagicBase.merge_pedfiles","text":"merge_pedfiles(pedfiles; keyargs...)\n\nmerge pedfiles into a single pedfile. \n\nPositional arguments\n\npedfiles::AbstractString: a list of pedfiles. \n\nKeyword arguments\n\nisped::Bool: if true, designinfo in pedfiles is in form of pedigree, and otherwise designcode. \n\nisfounderinbred::Bool=true: if true, founders are inbred. \n\noutstem::AbstractString=popid: stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.array_extract_pedfile","page":"API","title":"MagicBase.array_extract_pedfile","text":"array_extract_pedfile(arrayfile; keyargs...)\n\nextract pedfile from arrayfile. Work only for a non-subdivided population.  \n\nPositional arguments\n\narrayfile::AbstractString: SNP array genofile. \n\nKeyword arguments\n\ndesigncode::AbstractString: designcode\n\npopid::AbstractString: population id. \n\ndelim= \",\": text delimiter. \n\noutstem::AbstractString=popid: stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.vcf_pad_samples","page":"API","title":"MagicBase.vcf_pad_samples","text":"vcf_pad_samples(vcffile; keyargs...)\n\npad samples into vcffiles with all genotypes being missing. \n\nPositional arguments\n\nvcffile::AbstractString: vcf genofile. \n\nKeyword arguments\n\npadsamples::AbstractVector: a list of samples to be padded \n\ncommentstring::AbstractString=\"##\": the lines beginning with  are ignored\n\noutstem::AbstractString=popid: stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.vcf_extract_pedfile","page":"API","title":"MagicBase.vcf_extract_pedfile","text":"vcf_extract_pedfile(vcffile; keyargs...)\n\nextract pedfile from vcffile. Work only for a non-subdivided population.  \n\nPositional arguments\n\nvcffile::AbstractString: vcf genofile. \n\nKeyword arguments\n\ndesigncode::AbstractString: designcode\n\nishomozygous::Bool=false: specify if offspring are completely homozygous.\n\nisfglexch::Bool=true: specify if founders are exchangeable.\n\npopid::AbstractString=\"pop\": population id. \n\noutstem::AbstractString=\"outstem\": stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.vcffilter","page":"API","title":"MagicBase.vcffilter","text":"vcffilter(vcffile; keyargs...)\n\nfilter markers line by line. \n\nPositional arguments\n\nvcffile::AbstractString: vcf genofile. \n\nKeyword arguments\n\nsetmarkerid::Union{Nothing,Bool}=nothing: if true, set markerid. If it is nothing, setmarkerid = true only if markerid is missing\n\ndelsamples::Union{Nothing,AbstractVector}=nothing: list of sample IDs to be deleted. If it is nothing, no deletion of samples \n\ndeldupe::Bool=false: if true, delete sucessive markers that have exactly duplicated genotypes in format of GT\n\ndelmultiallelic::Bool=true: if true, delete markers with >2 alleles. \n\ndelmonomorphic::Bool=true: if true, delete markers with single allele. \n\nseqstretch::Integer=0: delete non-initial markers in a sequence stretch of length <= seqstretch (in bp), assuming marker are ordered by physical positions. If it is not positive, no filtering for short streches.\n\nsnp_maxmiss::Real = 0.99: delete markers with missing fraction > snp_maxmiss\n\nsnp_minmaf::Real = 0.01: delete markers with minor allele frequency < snp_minmaf\n\ncommentstring::AbstractString=\"##\": the lines beginning with  are ignored\n\noutstem::AbstractString=popid: stem of output filename.\n\nworkdir::AbstractString=pwd(): directory for reading and saving files.\n\nlogfile::AbstractString = outstem*\"_vcffilter.log\": log filename. \n\nverbose::Bool=true: if true, print details on the stdout.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.pedfile_designcode2ped","page":"API","title":"MagicBase.pedfile_designcode2ped","text":"pedfile_designcode2ped(pedfile; commentstring='#',workdir=pwd())\n\nconvert a pedfile from designinfo being designcode to pedigree.\n\nKeyword arguments\n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise outbred. \n\ncommentstring::AbstractString=\"##\": the lines beginning with commentstring are ignored in pedfile.\n\nworkdir::AbstractString=pwd(): directory for reading pedfile.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.plotcondprob","page":"API","title":"MagicBase.plotcondprob","text":"plotcondprob(magicancestry,offspring=nothing,probtype=\"haploprob\",\n    colorgradient = cgrad([:white,:blue,:red]),,\n    boundaryline = (1.5, :gray),\n    truemarker=(:star, 5, 0.5,:gray,stroke(:gray)),\n    truefgl=nothing,\n    outfile::Union{Nothing, AbstractString}=nothing,\n    plotkeyargs...)\n\nplot heatmap for conditional probability.\n\nPositional arguments\n\nmagicancestry::MagicAncestry: magicancestry returned from magicreconstruct.\n\nKeyword arguments\n\nprobtype::AbstractString=\"haploprob\": specify type of condprob\n\noffspring::Union{Nothing,Integer}=nothing: offsprign index. By default, a random offspring index. \n\ncolorgradient::ColorGradient=cgrad([:white,:blue,:red]),: color gradient for heatmap\n\nboundaryline=(1.5,:gray): vertical lines for chromosome boundaries.\n\ntruemarker=(:star, 5, 0.5,:gray,stroke(:gray)): scatter markers for true ancestral states.\n\ntruefgl::Union{Nothing,MagicGeno}=nothing: provides true ancestral origins. \n\noutfile::Union{Nothing, AbstractString}=nothing: if nothing, not save the plot, and otherwise save to outfile.  \n\nplotkeyargs...: other Plots.plot keyward arguments. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.animcondprob","page":"API","title":"MagicBase.animcondprob","text":"animcondprob(magicancestry,fps=1,outstem=\"\",kewargs...)\n\nanimation for plots of conditional probability.\n\nPositional arguments\n\nmagicancestry::MagicAncestry: magicancestry returned from magicreconstruct.\n\nKeyword arguments\n\nfps::Real=1: number of frames per seconds.\n\noutfile::AbstractString=\"condprob.gif\": output file for saving animation.\n\nsee plotcondprob for keyargs.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.plotmarkermap","page":"API","title":"MagicBase.plotmarkermap","text":"plotmarkermap(mapx, mapy;\n    boundaryline = (1.5,:dot,:black),\n    markersize = 1.5,\n    isannotate= true,\n    maplabels=[\"mapx(cM)\", \"mapy(cM)\"],\n    isphysmap = [false,false],\n    plotkeyargs...\n)\n\nplot postions of mapx vs those of mapy.\n\nPositional arguments\n\nmapx::Vector{DataFrame}: marker map for all chromosomes.\n\nmapy::Vector{DataFrame}: comparing map for all chromosomes.\n\nKeyword arguments\n\nboundaryline = (1.0,:dot,:gray): vertical lines for chromosome boundaries.\n\nmarkersize::Real= size(mapx,1) <= 1000 ? 3.0 : 1.5: size of scatter markers.\n\nisannotate::Bool=true: if ture,  annotate chromosome ID and kendall correlation.\n\nmmaplabels::Union{Nothing,AbstractString}=nothing: labels of comparing marker maps.\n\nisphysmap::AbstractVector = falses(2): specify if mapx and/or map are physical maps. \n\nplotkeyargs...: other Plots.plot keyward arguments. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicBase.plotrecombreak","page":"API","title":"MagicBase.plotrecombreak","text":"plotrecombreak(magicancestry,chr=1,\n    colorgradient = ColorGradient([:yellow,:blue,:red]),\n    truefgl=nothing)\n\nplot recombination breakpoints.\n\nPositional arguments\n\nmagicancestry::MagicAncestry: magicancestry returning from magicreconstruct.\n\nKeyword arguments\n\nchr::Integer=1: chromosome index.\n\ncolorgradient::ColorGradient=cgrad([:white,:blue,:red]): color gradient for heatmap\n\ntruefgl::Union{Nothing,MagicGeno}: provides true ancestral origins. \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicSimulate","page":"API","title":"MagicSimulate","text":"MagicSimulate\n\na package for simulating genotyping data in multiparental populations.  See also magicsimulate.\n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicSimulate.simfhaplo","page":"API","title":"MagicSimulate.simfhaplo","text":"simfhaplo(; kwargs...)\n\nsimulate founder haplotypes. \n\nKeyword arguments\n\nnsnp: number of markers.\n\nnparent: number of parents.\n\nmissingstring=\"NA\": string representing missing value. \n\nchrlen::AbstractVector = 100 * ones(5):  specify genetic length of each chromosome. \n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise outbred.\n\noutfile = \"sim_fhaplo.vcf.gz\": output filename. \n\nworkdir::AbstractString = pwd() specifies the working directory.\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicSimulate.magicsimulate","page":"API","title":"MagicSimulate.magicsimulate","text":"magicsimulate(fhaplofile, pedinfo; kwargs...)\n\nsimulate genotypic data from founder haplotypes in fhaplofile and pedigree information in pedinfo.\n\nPositional arguments\n\nfhaplofile::AbstractString specifies file for founder haplotypes including marker map. The fhaplofile extension must be \".vcf\" or \".csv\".\n\npedinfo::Union{AbstractString,MateScheme} specifies pedigree information via a matescheme (e.g. MateScheme(8,[\"Pairing\",\"Selfing\"],[3,6])),  or via a pedigree file (if pedinfo[end-3:end]==\".csv\"),  or via a string designcode (e.g. \"8ril-self6\").\n\nKeyword arguments\n\nisfounderinbred::Bool=true if true, the founders are inbred. For inbred founders, the heterozygous genotypes are set to missing. For outbred founders, genotypes must be phased.\n\npopsize::Union{Nothing,Integer}=200 specifies the population size, valid only if the pedinfo is specified via a designcode or matescheme.\n\nerror_randallele::Union{Nothing,Real}=0.0 specifices genotyping error model.  The error model follows uniform allele model with probability errorrandallele,  and it follows uniform genotype model with probability 1-errorrandallele. If it is nothing, error_randallele  is given by the interally estimated non-ibd probability. \n\nfoundererror::Distribution=Beta(1,199) specifies that the probability distribution of genotyping error rate at a marker in founders. At a given marker, founders have the same error rate. \n\noffspringerror::Distribution=Beta(1,199) specifies that the probability distribution of genotyping error rate at a marker in offspring. At a given marker, offspring have the same error rate. \n\nfoundermiss::Distribution=Beta(1,9) specifies that the probability distribution of the fraction of missing genotypes at a marker in founders.\n\noffspringmiss::Distribution=Beta(1,9) specifies that the probability distribution of the fraction of missing genotypes at a marker in offspring.\n\nseqfrac::Real=0.0 specifies the fraction of markers being genotyped by sequencing; the rest markers are genotyped by SNP array.\n\nseqerror::Distribution = Beta(1,199) specifies the probability diestribution of sequencing error rate among markers. \n\nallelebalancemean::Distribution = Beta(10,10) specifies the probability distribution of the mean sequencing allelic balance among markers. \n\nallelebalancedisperse::Distribution = Exponential(0.05) specifies overdispersion parameter for the probability distribution of allelebalancemean among individuals at a marker. \n\nseqdepth::Distribution = Gamma(2, 5) specifies the probability distribution of the mean read depth at a marker. \n\nseqdepth_overdispersion::Distribution = Gamma(1,1) specifies the probability distribution of over-dispersion of read depths among individuals at a marker.  Given the mean depth lam at a marker, the read depth of an individual follows a NegativeBionomial(r,p), such that mean lam = r(1-p)/p, and variance = r(1-p)/p^2 = r(1+lam/r) = r(1+seqdepthoverdispersion) where seqdepthoverdispersion = lam/r. seqdepth_overdispersion = 0 denotes no over-dispersion. \n\nisobligate::Bool=false specifies whether there must be at least one crossover event\n\ninterference::Integer=0 specifies the strength of chiasma interference. By default, no chiasma interference. The recombination breakpoins are obtained by taking every (1+interference) points that follow a Poisson distribution along chromosome.\n\nispheno::Bool=false specifies whether to simulate phenotypes.\n\npheno_nqtl::Integer=1 specifies the number of QTLs in simulating phenotypes.\n\npheno_h2::Real= 0.5 specifies heritablity in simulating phenotypes.\n\nselect_nqtl::Integer=1 specifies the number of QTLs in simulating trait for artifical selection.\n\nselect_prop::Real = 1.0 specifies the proportion of zygotes selected in artifical selection. By default, no artifical selection.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\" specifies the stem of output filenames.\n\nworkdir::AbstractString = pwd() specifies the working directory.\n\nverbose::Bool=true: if true, print details on the stdout.\n\nExamples\n\njulia> magicsimulate(\"fhaplo.vcf.gz\",\"ped.csv\")\njulia> magicsimulate(\"fhaplo.vcf.gz\",\"8ril-self6\"; popsize=800)\n\n\n\n\n\nmagicsimulate(pedinfo; kwargs...)\n\nsimulates ancestral blocks from pedinfo. \n\nPositional arguments\n\npedinfo::Union{AbstractString,MateScheme} specifies pedigree information via a matescheme (e.g. MateScheme(8,[\"Pairing\",\"Selfing\"],[3,6])),  or via a pedigree file (if pedinfo[end-3:end]==\".csv\"),  or via a string designcode (e.g. \"8ril-self6\").\n\nKeyword arguments\n\nisfounderinbred::Bool=true if true, the founders are inbred. For inbred founders, the heterozygous genotypes are set to missing. For outbred founders, genotypes must be phased.\n\npopsize::Union{Nothing,Integer}=200 specifies the population size, valid only if the pedinfo is specified via a designcode or matescheme.\n\nchrlen::AbstractVector= 100*ones(5) specifies lengths (cM) for each chromosome.\n\nisobligate::Bool=false specifies whether there must be at least one crossover event\n\ninterference::Integer=0 specifies the strength of chiasma interference. By default, no chiasma interference. The recombination breakpoins are obtained by taking every (1+interference) points that follow a Poisson distribution along chromosome.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\" specifies the stem of output filenames.\n\nworkdir::AbstractString = pwd() specifies the working directory.\n\nverbose::Bool=true: if true, print details on the stdout.\n\nOutputs\n\nOutput file Description\noutstem_ped.csv simulated pedigree file\noutstem_truecontfgl.csv truevalues of continuous origin-genotypes\n\nHere fgl denotes founder genome labels, and origin-genotypes denote genotypes with each fgl  being regarded as a distinct allele.\n\nExamples\n\njulia> magicsimulate(\"8ril-self6\"; popsize=800)\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicFilter","page":"API","title":"MagicFilter","text":"MagicFilter\n\na package for filtering markers and individuals in connected multiparental populations.  Export one function:  magicfilter.\n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicFilter.magicfilter","page":"API","title":"MagicFilter.magicfilter","text":"magicfilter(genofile, pedinfo;\n    formatpriority, isphysmap, recomrate, commentstring,kwargs...)\n\nfilter mrkers and founders/offspring from genofile and pedinfo.\n\nPositional arguments\n\ngenofile::AbstractString genotypic data file.\n\npedinfo::Union{MagicBase.JuncDist,AbstractString} specifies pedigree information via a pedigree fille or a string designcode or via a struct juncdist::JuncDist.\n\nKeyword arguments\n\nSee formmagicgeno for the arguments (formatpriority, isphysmap, recomrate,commentstring) that are used for formming magicgeno.  Note that formatpriority=[\"AD\",\"GT\"] by default. \n\nSee magicfilter! for kwargs.\n\nExamples\n\njulia> magicfilter(\"geno.vcf.gz\",\"4ril_self3\")\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicFilter.magicfilter!","page":"API","title":"MagicFilter.magicfilter!","text":"magicfilter!(magicgeno::MagicGeno; kwargs...)\n\nremoves bad mrkers and founders/offspring from magicgeno.\n\nKeyword arguments\n\nmodel::AbstractString=\"jointmodel\": prior dependence of ancestral prior process along the two homologous chromosomes within an offspring. It must be \"depmodel\", \"indepmodel\", or \"jointmodel\". \n\nlikeparameters::LikeParameters=LikeParameters(): specifies default genotyping error rates. \n\nisfounderinbred::Bool=true: specifies if fouonders are inbred\n\nchrsubset::Union{Nothing,AbstractRange,AbstractVector}=nothing: subset of chromosome indices.   nothing denotes all chromosomes. Delete chromosome indices that are out of range.\n\nsnpsubset::Union{Nothing,AbstractRange,AbstractVector}=nothing: subset of marker indices within each chromosome.   nothing denotes all markers. Marker indices that are larger than the number of markers   within the chromosome are deleted.\n\nthreshcall::Real = model == \"depmodel\" ? 0.95 : 0.9: threshold for genotype calling. The filtering is based on called genotypes. \n\nmin_subpop::Integer = 1: delete subpopulations with size < min_subpop.\n\nmin_nprogeny::Integer = 1: delete founder and their progeny if the number of progeny < min_nprogeny.\n\nsnp_monosubpop::Integer = 20: a subpopulation is tested for monomorphic at a marker only if the number of observed genotypes >= snp_mono_subpop.\n\nsnp_mono2miss::Union{Nothing,Bool} = true: if true, all offspring genotypes in a monomorphic subpopulation are set to missing,  and otherwise only inconsistent offspring genotypes are corrected. And if nothing, offspring genotypes are not changed.\n\ndel_inconsistent::Bool = false: if true, delete markers with inconsistent changes of founder genotypes. \n\nsnp_minmaf::Real = 0.05: keep only markers if maf >= snp_min_maf; maf denotes minor allele frequency.\n\nsnp_missfilter::Function=(fmiss,omiss)-> omiss <= 1.0 || fmiss < 0.0: keep only markers if snp_missfilter(fmiss, omiss); fmiss denotes missing fraction in founders, and omiss for offspring.\n\noffspring_maxmiss::Real = 0.99: delete offspring if its missing > offspring_max_miss\n\nisfilterdupe::Bool=false: if true, remove duplicated offspring by their correlations.\n\noffspring_maxcorr::Real = 0.99: two offspring are duplciated if their correlation >= offspring_maxcorr,\n\noffspring_cutcorr::Real = 0.4: pairwise offspring correlations that < offspring_cutcorr are set to zeros. \n\nisparallel::Bool=true: if true, pefrom parallel multicore computing.\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\" specifies the stem of output files.\n\nlogfile::Union{Nothing,AbstractString,IO}= (isnothing(outstem) ? nothing : string(outstem,\"_magicreconstruct.log\")): log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\nExamples\n\njulia> magicgeno = formmagicgeno(\"geno.vcf.gz\",\"ped.csv\")\njulia> magicfilter!(magicgeno)\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicCall","page":"API","title":"MagicCall","text":"MagicCall\n\na package for single site genotyping calling from sequence data in connected multiparental populations.  Export one function: magiccall.\n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicCall.magiccall","page":"API","title":"MagicCall.magiccall","text":"magiccall(genofile, pedinfo; kwargs...)\n\nsingle marker genotype call from genofile and pedinfo.\n\nPositional arguments\n\ngenofile::AbstractString genotypic data file.\n\npedinfo::Union{MagicBase.JuncDist,AbstractString} specifies pedigree information via a pedigree fille or a string designcode or via a struct juncdist::JuncDist.\n\nKeyword arguments\n\nmodel::Union{AbstractString,AbstractVector}=\"jointmodel\":  prior depedence of ancestral prior process   along the two homologous chromosomes within an offspring. It must be \"depmodel\",   \"indepmodel\", or \"jointmodel\". \n\nlikeparameters::LikeParameters=LikeParameters(peroffspringerror=0.0): parameters for genotypic data model.    If isinfererror = true, parameters with values being nothing will be inferred. \n\nthreshlikeparameters::ThreshLikeParameters=ThreshLikeParameters(): markers with inferred likeparameters values > threshlikeparameters values will be deleted. \n\npriorlikeparameters::PriorLikeParameters=PriorLikeParameters(offspringerror=Beta(1.05,9),seqerror=Beta(1.05,9)): priors for likelihood parameters\n\nisrandallele::Bool=true: if true, genotyping error model follows the random allelic model, and otherwise the random genotypic model. \n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise they are outbred.\n\nthreshcall::Real = 0.9: offspring genotypes are call if    the maximum posterior probability > threshcall.\n\ndelmultiallelic::Bool=true: if true, delete markers with >=3 alleles. \n\ndelmonomorphic::Bool=true: if true, delete monomorphic markers. \n\nsnp_minmaf::Real = 0.05: delete makrs with minor allele frequency (MAF) < 0.05. \n\nsnp_maxmiss::Real = 0.99: delete makrs with genotype missing frequency > 0.99. \n\nisrawcall::Bool= false: if true, perform raw genotype calling. \n\nisinfererror::Bool = !israwcall: if true, infer marker specific likelihood parameters that have values of nothing in likeparameters. \n\nisparallel::Bool=true: if true, parallel multicore computing over chromosomes.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\": stem of output filenames.\n\noutext::AbstractString=\".vcf.gz\": extension of output file for imputed geno.\n\nlogfile::Union{Nothing, AbstractString,IO} = outstem*\"_magiccall.log\": log file or IO for writing log. If it is nothing, no log file.\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\nverbose::Bool=true: if true, print details on the stdout.  \n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicMap","page":"API","title":"MagicMap","text":"MagicMap\n\na package for genetic map construction in connected multiparental populations.  Export one function:  magicmap.\n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicMap.magicmap","page":"API","title":"MagicMap.magicmap","text":"magicmap(genofile, pedinfo; kwargs...)\n\ngenetic map construction from genofile and pedinfo.\n\nPositional arguments\n\ngenofile::AbstractString genotypic data file.\n\npedinfo::Union{MagicBase.JuncDist,AbstractString} specifies pedigree information via a pedigree fille or a string designcode or via a struct juncdist::JuncDist.\n\nKeyword arguments\n\nformatpriority::AbstractVector=[\"GT\",\"AD\"]: the priority of genotype    formats when parasing input vcf genofile.  \n\nmodel::AbstractString=\"jointmodel\":  prior depedence of ancestral prior process   along the two homologous chromosomes within an offspring. It must be \"depmodel\",   \"indepmodel\", or \"jointmodel\". \n\nlikeparameters::LikeParameters=LikeParameters(): specifies default genotyping error rates. \n\nthreshcall::Real = model == \"depmodel\" ? 0.95 : 0.9: threshold for genotype calling. The filtering is based on called genotypes. \n\nisrandallele::Bool=true: if true, genotyping error model follows the random allelic model, and otherwise the random genotypic model. \n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise they are outbred.\n\nsnpthin::Integer = 1: take every snpthin-th markers.\n\nispermmarker::Bool=true: if true, permute input marker ordering\n\nisdupebinning::Union{Nothing,Bool}=false: if ture, bin duplicate marker. \n\nbinshare::Real=0.5: min fraction of shared genotypes between represent marker and each of the rest in a bin. \n\nminlodsave::Union{Nothing, Real}=nothing: results of pairwise analyses are saved only if the LOD score for LD or linkage > minlodsave.    If it is nothing, minlodsave increases with number of markers. \n\nminldsave::Union{Nothing, Real}=nothing: results of pairwise LD analyses are saved only if the LD score (squared allelic correlation) > minldsave.    If it is nothing, minldsave increases with number of markers. \n\nncluster::Union{Nothing, Integer}=nothing: number of linkage groups.    If it is nothing, ncluster will be inferred in the range of [minncluster, maxncluster]\n\nminncluster::Integer = isnothing(ncluster) ? 1 : ncluster: min number of linkage groups.    If it is nothing, minncluster is set to 1 if ncluster = nothing and otherwise it is set to ncluster\n\nmaxncluster::Integer = isnothing(ncluster) ? 30 : ncluster: max number of linkage groups.    If it is nothing, maxncluster is set to 30 if ncluster = nothing and otherwise it is set to ncluster\n\nclusteralg::Union{Nothing,AbstractString}=nothing: clustering algorithm after spectral embedding. \n\nminsilhouette::Real=0.0: delete markers withg silhouette scores < minsilhouette. \n\nminlodcluster::Union{Nothing, Real} = nothing: minimum linkage LOD threshold.   If it is nothing, estimated internally as the minimum lod keeping the resulting   graph connected, ignoring the connected components of size < mincomponentsize.\n\nmincomponentsize::Union{Nothing,Integer} = nothing: the markers in the graph   connectecd components of size < mincomponentsize are removed. If it is nothing, it is internally set. \n\nmaxrf::Union{Nothing,Real} = nothing: keep pairwise linakge analyses only if recombation fraction <= maxrf. \n\nbinrf::Union{Nothing,Real}=nothing: if binrf >= 0, perform linkage-based marker binning such that the recombation fraction    for two markers in a bin is always <= binrf, and otherwise not perform linkage-based binning.    If it is nothing, binrf is set to 0.001 if #markers > ncluster2000 and otherwise -1 if ncluster is not nothing,    and binrf is set to 0.001 if #markers > maxncluster2000 and otherwise -1 if ncluster is nothing. \n\nalwayskeep::Real=0.99: neighbors are always kept if its recombation fraction >= alwayskeep, regardless of knncluster or knnorder. \n\nminlodcluster::Union{Nothing,Real} = nothing: min LOD score for clustering. If it is nothing, it is internally set. \n\nminlodorder::Union{Nothing,Real} = nothing: min LOD score for ordering. If it is nothing, it is internally set. \n\nmaxminlodcluster::Union{Nothing,Real} = 10,: if minlodcluster = nothing, minlodcluster is internally estimated with upbound maxminlodcluster. \n\nmaxminlodorder::Union{Nothing,Real} = nothing: if minlodorder = nothing, minlodorder is internally estimated with upbound maxminlodorder. \n\nknncluster::Union{Nothing,Function} = nothing: an anonymous function knncluster(x) of #markers x.    It returns #nearest neighbors for clustering. If it is nothing, knncluster = x->0.1*x. \n\nknnorder::Union{Nothing,Function} = nothing: an anonymous function knncluster(x) of #markers x in a linkage group.    It returns #nearest neighbors for ordering. If it is nothing, knnorder = x->sqrt(x). \n\nisparallel::Bool=true: if true, multicore computing over chromosomes.\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\ncommentstring::AbstractString=\"##\": rows that begin with commentstring will be ignored.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\": stem of output filenames.\n\noutext::AbstractString=\".vcf.gz\": extension of output file for imputed geno.\n\nlogfile::Union{Nothing,AbstractString,IO}= (isnothing(outstem) ? nothing : string(outstem,\"_magicimpute.log\")):   log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\nExample\n\njulia> magicmap(genofile,pedinfo; ncluster=12)\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicImpute","page":"API","title":"MagicImpute","text":"MagicImpute\n\na package for genotype imputation in multiparental populations.  Export two functions:  magicimpute and magicimpute!.\n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicImpute.magicimpute","page":"API","title":"MagicImpute.magicimpute","text":"magicimpute(genofile, pedinfo;\n    formatpriority, isphysmap, recomrate, commentstring,kwargs...)\n\ngenotype imputation from genofile and pedinfo.\n\nPositional arguments\n\ngenofile::AbstractString genotypic data file.\n\npedinfo::Union{MagicBase.JuncDist,AbstractString} specifies pedigree information via a pedigree fille or a string designcode or via a struct juncdist::JuncDist.\n\nKeyword arguments\n\nSee formmagicgeno for the arguments (formatpriority, isphysmap, recomrate,commentstring) that are used for formming magicgeno.  Note that formatpriority=[\"AD\",\"GT\"] by default. \n\nmapfile::Union{Nothing, AbstractString}=nothing: if it is nothing, use the marker map in the input genofile, and otherwise reset genetic marker map by that in mapfile.      The mapfile can either be in VCF format or in CSV format. For VCF format, genetic map is provided in the \"INFO\" column using keywords \"LINKAGEGROUP\" and \"POSCM\".      For CSV-format, it must contain at least five columns: \"marker\", \"linkagegroup\", \"poscm\", \"physchrom\", and \"physposbp\", where missing values are represented by \"NA\".      If there exist columns \"binno\" and \"represent\", markers with the same \"binno\" are binned with the represent being the marker with non-zero \"represent\".      All the rest columns are ignored. \n\nSee magicimpute! for the other arguments.\n\nExamples\n\njulia> magicimpute(\"geno.vcf.gz\",\"4ril_self3\")\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicImpute.magicimpute!","page":"API","title":"MagicImpute.magicimpute!","text":"magicimpute!(magicgeno::MagicGeno; kwargs...)\n\ngenotype imputation from magicgeno.\n\nKeyword arguments\n\nmodel::Union{AbstractString,AbstractVector}=\"jointmodel\":  prior depedence of ancestral prior process   along the two homologous chromosomes within an offspring. If model is a string, it must be \"depmodel\",   \"indepmodel\", or \"jointmodel\". If model is a vector, the first element specifies the model    for founder imputation and the last element for offspring imputation. \n\nlikeparameters::LikeParameters=LikeParameters(): parameters for genotypic data model.    If isinfererror = true, parameters with values being nothing will be inferred. \n\nthreshlikeparameters::ThreshLikeParameters=ThreshLikeParameters(): markers with inferred likeparameters values > threshlikeparameters values will be deleted. \n\npriorlikeparameters::PriorLikeParameters=PriorLikeParameters(): priors for likelihood parameters\n\nisrandallele::Bool=true: if true, genotyping error model follows the random allelic model, and otherwise the random genotypic model. \n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise they are outbred.\n\nchrsubset::Union{Nothing,AbstractRange,AbstractVector}=nothing: subset of chromosome indices.   nothing denotes all chromosomes. Delete chromosome indices that are out of range.\n\nsnpsubset::Union{Nothing,AbstractRange,AbstractVector}=nothing: subset of marker indices within each chromosome.   nothing denotes all markers. Marker indices that are larger than the number of markers   within the chromosome are deleted.\n\ntarget::AbstractString = \"all\": target of imputation. target=all imputes   founders and offspring. target must be \"all\", \"founder\", \"offspring\". \n\nthreshimpute::Real=0.9: offspring genotypes are imputed if   the maximum posterior probability > threshimpute.\n\nbyfounder::Integer=0: alternatively impute each blocks of founders. The founders are partitioned such that the size of each block <= byfounder.    If byfounder=-1, impute all founders simulteneously.    If byfounder=0, reset to the maximum subpopulation size, and the partition is based on the fouders of each sub-population.\n\ninputneighbor::Union{Nothing,AbstractDict}=nothing: nearest neighbors for each markers, which is required for neighbor-based marker order refinement.    If it is nothing and isordermarker = true, perform only random marker order refinement. \n\ninputbinning::Union{Nothing,AbstractDict}=nothing: a parition of markers into bins.  If it is not nothing, first impute founders for representative markers of each bin    and them impute founders for all markers. \n\nisinfererror::Bool = true: if true, infer marker specific likelihood parameters that have values of nothing in likeparameters. \n\ntukeyfence::Real=3.0: tukey fence for detecting outlier error rates (including foundererror, offspringerror, seqerror, and allelebalancemean). \n\nminoutlier::Real=0.05: markers with outlier error rates are removed only if their error rates > minoutlier. \n\niscorrectfounder::Union{Nothing, Bool} = nothing: if true, perform parental error correction.\n\nphasealg::AbstractString=\"unphase\": if phasealg=forwardbackward, the output diplotype probabilities (in format GP), corresonding to the phased genotypes 0|0, 0|1, 1|0, and 1|1, are caculated based on the forward-backward algorithm,    and the output phased offspring genotypes (in format GT) are given by those with the largest diplotype probabilities if they are greater than threshcall.    If phasealg=viterbi, the output diplotype probabilities (GP) are set to those of phasealg=forwardbackward, and the output phased genotypes (GT) are caculated based on the Viterbi algorithm.    If phasealg=unphase, the output genotype probabilities (GP), corresonding to the unphased genotypes 0/0, 0/1, and 1/1, are calculated based on the forward backward algorithm,    and the output unphased genotypes (GT) are given by those with the largest genotype probabilities if they are greater than threshcall. \n\nisdelmarker::Bool=true: if true, perform marker deletion.\n\ndelsiglevel::Real = 0.01: significance level for marker deletion\n\nisordermarker::Bool=false: if true, refine local marker ordering.\n\nisspacemarker::Bool=false: if true, estimate inter-marker distances.\n\ntrimcm::Real=20: remove markers of each segment with distances to the flanking markers > trimcm.   The number of markers of each segment must be less than 5% total number of markers.\n\nskeletonsize::Union{Nothing,Integer} = nothing: number of skeleton markers for piecewisely re-scaling inter-marker distances.    If it is nothing, skeletonsize is set to the number of distint positions in the genetic map before re-scaling. \n\nslidewin_neighbor::Union{Nothing,Integer} = 200: max sliding window size for neighbor-based marker order refinement. \n\nslidewin::Union{Nothing,Integer} = nothing: max sliding window size for random marker order refinement \n\nbinriffle::Union{Nothing,Integer} = nothing: valid only in the case of marker binning. Skip magicimputefounder after replacing representatives with binned markers if binriffle < 0.    Keep magicimputefounder for binned markers but without refinning ordering if 0 <= binriffle <= 1.    Keep magicimpute_founder for binned markers if binriffle >=2, and if isordermarker = true set random order refinement with slidewin = binriffle and ignore neighbor-based order refinement. \n\norderactions::AbstractVector = [\"inverse\",\"inverse00\"]: update actions for random marker order refinement.    It must be a subset of [\"inverse\",\"inverse00\", \"inverse01\",\"inverse10\"]. \n\norderactions_neighbor::AbstractVector = [\"inverse\",\"inverse01\"]: update actions for neighbor-based marker order refinement.    It must be a subset of [\"inverse\",\"inverse00\", \"inverse01\",\"inverse10\"]. \n\ninittemperature::Real= isordermarker ? 2.0 : 0.0: initial temperature of annealing algorithm for marker ordering.\n\ncoolrate::Real=0.7: temperature is mutiplied by coolrate after each iteration of annealing agrogrithm.\n\nminaccept::Real=0.15: minimum accept rate for controlling the window size of ordering update.\n\nisparallel::Bool=true: if true, parallel multicore computing over chromosomes.\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\ntempdirectory::AbstractString = tempdir(): temporary directory for inter-mediate results.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\": stem of output filenames.\n\noutext::AbstractString=\".vcf.gz\": extension of output file for imputed geno.\n\nlogfile::Union{Nothing,AbstractString,IO}= (isnothing(outstem) ? nothing : string(outstem,\"_magicimpute.log\")):   log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\nExamples\n\njulia> magicgeno = formmagicgeno(\"geno.vcf.gz\",\"ped.csv\")\njulia> magicimpute!(magicgeno)\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicReconstruct","page":"API","title":"MagicReconstruct","text":"MagicReconstruct\n\na package for haplotype reconstruction in connected multiparental populations.  Export two functions:  magicreconstruct and magicreconstruct!.\n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicReconstruct.magicreconstruct","page":"API","title":"MagicReconstruct.magicreconstruct","text":"magicreconstruct(genofile, pedinfo;\n    formatpriority, isphysmap, recomrate, commentstring,kwargs...)\n\nhaplotye reconstruction from genofile and pedinfo.\n\nPositional arguments\n\ngenofile::AbstractString genotypic data file.\n\npedinfo::Union{MagicBase.JuncDist,AbstractString} specifies pedigree information via a pedigree fille or a string designcode or via a struct juncdist::JuncDist.\n\nKeyword arguments\n\nSee formmagicgeno for the arguments (formatpriority, isphysmap, recomrate,commentstring) that are used for formming magicgeno,  except that formatpriority=[\"GP\", \"AD\", \"GT\"] by default. \n\nSee magicreconstruct! for the other arguments.\n\nExamples\n\njulia> magicreconstruct(\"geno.vcf.gz\",\"4ril_self3\")\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicReconstruct.magicreconstruct!","page":"API","title":"MagicReconstruct.magicreconstruct!","text":"magicreconstruct!(magicgeno::MagicGeno; kwargs...)\n\nhaplotype reconstruction from magicgeno.\n\nKeyword arguments\n\nmodel::AbstractString=\"jointmodel\":  prior depedence of ancestral prior process   along the two homologous chromosomes within an offspring. It must be \"depmodel\",   \"indepmodel\", or \"jointmodel\". \n\nisrandallele::Bool=true: if true, genotyping error model follows the random allelic model, and otherwise the random genotypic model. \n\nisfounderinbred::Bool=true: if true, founders are inbred, and otherwise they are outbred.\n\nchrsubset::Union{Nothing,AbstractRange,AbstractVector}=nothing: subset of chromosome indices.   nothing denotes all chromosomes. Delete chromosome indices that are out of range.\n\nsnpsubset::Union{Nothing,AbstractRange,AbstractVector}=nothing: subset of marker indices within each chromosome.   nothing denotes all markers. Marker indices that are larger than the number of markers   within the chromosome are deleted.\n\nhmmalg::AbstractString=\"forwardbackward\": HMM alogrithm for haplotype   reconstruction, and it must be either \"forwardbackward\" or \"viterbi\".\n\nisignorephase::Bool=false: if true, the phases of offspring genotypes are ignored. \n\nisMMA::Bool=true: if true, the Mathematica version of RABBIT.\n\nnplot_subpop::Integer=10: plots for up to nplot_subpop offspring in each subpopulation. \n\nisparallel::Bool=true: if true, multicore computing over chromosomes.\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\ntempdirectory::AbstractString = tempdir(): temporary directory for inter-mediate results.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\": stem of output filenames.\n\noutext::AbstractString=\".csv.gz\": extension of output file for imputed geno.\n\nlogfile::Union{Nothing,AbstractString,IO}= (isnothing(outstem) ? nothing : string(outstem,\"_magicimpute.log\")):   log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\nExamples\n\njulia> magicgeno = formmagicgeno(\"geno.vcf.gz\",\"ped.csv\")\njulia> magicreconstruct(magicgeno,model=\"jointmodel\")\n\n\n\n\n\n","category":"function"},{"location":"rabbit_api/#MagicScan","page":"API","title":"MagicScan","text":"MagicScan \n\na package for genomic QTL scan in connected multiparental populations.  Export one function: magicscan. \n\n\n\n\n\n","category":"module"},{"location":"rabbit_api/#MagicScan.magicscan","page":"API","title":"MagicScan.magicscan","text":"magicscan(ancestryfile, phenofile; commentstring=\"##\",kwargs...)\n\nperform genomics scan of QTL for multiparental populations. See magicreconstruct for generating ancestryfile by haplotype reconstruction.\n\nPositional arguments\n\nancestryfile::AbstractString specifies ancestry file resulting magicreconstruct\n\nphenofile::AbstractString specifies phenotypic file.\n\nKeyword arguments\n\nequation::Union{Nothing,FormulaTerm} = nothing speficies linear model equation. By defulat, StatsModel.@formula(y ~ 1), where y is the last column name in phenofile.\n\nthresholds::Union{Nothing,AbstractVector} = nothing: list of thresholds used in plotting scanning profile.\n\nnperm::Integer=200: number of permutations of phenotypes  for calculating thresholds that are not specified.\n\nsiglevels::AbstractVector = [0.05]: significance levels for calculating thresholds by permutations.\n\nislog10p::Bool=true: if true, the profile refers to -log10P, and LOD otherwise.\n\nmissingstring=[\"NA\",\"missing\"]: string denotes a missing phenotypic value.\n\ncommentstring::AbstractString specifies the lines beginning with commentstring are ignored in genofile or pedfile given by pedinfo.\n\nworkdir::AbstractString=pwd(): working directory for input and output files.\n\noutstem::Union{Nothing,AbstractString}=\"outstem\" specifies the stem of filename saving magicancestry. See MagicBase.savemagicancestry for the description of outputfile \"outstem_magicancestry.csv.gz\".\n\nlogfile::Union{Nothing,AbstractString,IO}= (isnothing(outstem) ? nothing : string(outstem,\"_magicreconstruct.log\")): log file or IO for writing log. If it is nothing, no log file.\n\nverbose::Bool=true: if true, print details on the stdout.\n\nExamples\n\njulia> magicscan(\"magicancestry.csv.gz\",\"pheno.csv\")\n\n\n\n\n\n","category":"function"},{"location":"pipeline/s3_magiccall/#S3-MagicCall","page":"S3 MagicCall","title":"S3 MagicCall","text":"","category":"section"},{"location":"pipeline/s3_magiccall/#Genotype-calling","page":"S3 MagicCall","title":"Genotype calling","text":"","category":"section"},{"location":"pipeline/s3_magiccall/","page":"S3 MagicCall","title":"S3 MagicCall","text":"The magiccall performs genotype calling marker by marker. It first estimates founder genotypes and likelihood parameters including sequence allelic balance bias and overdispersion, and then calculates posterior genotype probabilities for offspring. magiccall is necessary only for sequence data.","category":"page"},{"location":"pipeline/s3_magiccall/","page":"S3 MagicCall","title":"S3 MagicCall","text":"# code for Julia\nusing Distributed # set up parallel computation \nnprocs() < 6 && addprocs(6-nprocs())\n@everywhere using MagicCall  \nusing MagicCall  \ncd(@__DIR__)     \ngenofile = outstem*\"_magicfilter_geno.vcf.gz\"\npedfile = outstem*\"_magicfilter_ped.csv\"\nmagiccall(genofile,pedfile;    \n    outstem\n)","category":"page"},{"location":"pipeline/s3_magiccall/","page":"S3 MagicCall","title":"S3 MagicCall","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_magiccall.jl -g example_magicfilter_geno.vcf.gz \\\n    -p example_magicfilter_ped.csv \\\n    --nworker 5 \\\n    -o example","category":"page"},{"location":"pipeline/s3_magiccall/#Output-files","page":"S3 MagicCall","title":"Output files","text":"","category":"section"},{"location":"pipeline/s3_magiccall/","page":"S3 MagicCall","title":"S3 MagicCall","text":"outfile Description\noutstem*\"_magiccall.log\" log file\noutstem*\"_magiccall_geno.vcf.gz\" called genofile for downstream analysis\noutstem*\"_magiccall_delmarker.vcf.gz\" genofile for deleted markers\noutstem*\"_magicimpute_inferred_error.png\" statistical plots of inferred error rates","category":"page"},{"location":"pipeline/s3_magiccall/#Output:-genotyping-error","page":"S3 MagicCall","title":"Output: genotyping error","text":"","category":"section"},{"location":"pipeline/s3_magiccall/","page":"S3 MagicCall","title":"S3 MagicCall","text":"outstem*\"_magiccall_inferred_error.png\" gives the statistical plots of inferred error rates among markers. Note that error rates were estimated independently among markers. ","category":"page"},{"location":"pipeline/s3_magiccall/","page":"S3 MagicCall","title":"S3 MagicCall","text":"(Image: )","category":"page"},{"location":"rabbit_cli/#RABBIT's-command-line-interface(CLI)","page":"CLI","title":"RABBIT's command line interface(CLI)","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"See section pipeline for the description of output files.","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"Pages = [\"rabbit_cli.md\"]","category":"page"},{"location":"rabbit_cli/#rabbit_simfhaplo.jl","page":"CLI","title":"rabbit_simfhaplo.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_simfhaplo.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_simfhaplo.jl [--nsnp NSNP] [--nparent NPARENT]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--chrlen CHRLEN] [-o OUTFILE] [-w WORKDIR]\n                        [-h]\n\nSimulating founder haplotypes\n\noptional arguments:\n  --nsnp NSNP           total number of SNPs (type: Int64, default:\n                        1000)\n  --nparent NPARENT     number of parents (type: Int64, default: 4)\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --chrlen CHRLEN       list of chromosome lengths (in centi-Morgan),\n                        e.g, \"[100,100]\" denotes 100 cM for each of\n                        two chromosomes (default: \"[100]\")\n  -o, --outfile OUTFILE\n                        output filename (default: \"sim_fhaplo.vcf.gz\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_generate_magicped.jl","page":"CLI","title":"rabbit_generate_magicped.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_generate_magicped.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_generate_magicped.jl [--designcodes DESIGNCODES]\n                        [--founders FOUNDERS]\n                        [--subpopsizes SUBPOPSIZES] [-o OUTSTEM]\n                        [-w WORKDIR] [-h]\n\nGenerate RABBIT-format pedigree file\n\noptional arguments:\n  --designcodes DESIGNCODES\n                        design codes for each subpopulation\n  --founders FOUNDERS   founders for each subpopulation\n  --subpopsizes SUBPOPSIZES\n                        population sizes for each subpopulation\n  -o, --outstem OUTSTEM\n                        outstem of output files (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicsimulate.jl","page":"CLI","title":"rabbit_magicsimulate.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicsimulate.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicsimulate.jl -g FHAPLOFILE -p PEDINFO\n                        [--popsize POPSIZE]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--foundererror FOUNDERERROR]\n                        [--offspringerror OFFSPRINGERROR]\n                        [--foundermiss FOUNDERMISS]\n                        [--offspringmiss OFFSPRINGMISS]\n                        [--seqfrac SEQFRAC] [--seqdepth SEQDEPTH]\n                        [--seqerror SEQERROR]\n                        [--allelebalancemean ALLELEBALANCEMEAN]\n                        [--allelebalancedisperse ALLELEBALANCEDISPERSE]\n                        [--ispheno ISPHENO] [--pheno_nqtl PHENO_NQTL]\n                        [--pheno_h2 PHENO_H2]\n                        [--nplot_subpop NPLOT_SUBPOP] [-o OUTSTEM]\n                        [-w WORKDIR] [-h]\n\nSimulating genotypic data in connected multiparental populations\n\noptional arguments:\n  -g, --fhaplofile FHAPLOFILE\n                        filename for founder haplotypes including\n                        marker map\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --popsize POPSIZE     poulation size, i.e. the number of offspring\n                        (type: Int64, default: 200)\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --foundererror FOUNDERERROR\n                        distribution of founder allelic error rate\n                        among markers (default: \"Beta(1,199)\")\n  --offspringerror OFFSPRINGERROR\n                        distribution of offspring allelic error rate\n                        among markers (default: \"Beta(1,199)\")\n  --foundermiss FOUNDERMISS\n                        distribution of founder genotype msissing\n                        fraction among markers (default: \"Beta(1,9)\")\n  --offspringmiss OFFSPRINGMISS\n                        distribution of offspring genotype msissing\n                        fraction among markers (default: \"Beta(1,9)\")\n  --seqfrac SEQFRAC     fraction of markers being genotyped by\n                        sequencing, and the rest by SNP array. (type:\n                        Float64, default: 0.0)\n  --seqdepth SEQDEPTH   distribution of mean read depth among markers\n                        (default: \"Gamma(2,5)\")\n  --seqerror SEQERROR   distribution of sequence read error\n                        probability (default: \"Beta(1,999)\")\n  --allelebalancemean ALLELEBALANCEMEAN\n                        distribution of allelic balance mean among\n                        markers (default: \"Beta(10,10)\")\n  --allelebalancedisperse ALLELEBALANCEDISPERSE\n                        distribution of allele balance overdispersion\n                        among markers (default: \"Exponential(0.05)\")\n  --ispheno ISPHENO     if true, simulate phenotypes (type: Bool,\n                        default: false)\n  --pheno_nqtl PHENO_NQTL\n                        number of QTLs for simulating phenotypes\n                        (type: Int64, default: 1)\n  --pheno_h2 PHENO_H2   heritablity for simulating phenotypes (type:\n                        Float64, default: 0.5)\n  --nplot_subpop NPLOT_SUBPOP\n                        number of plots per subpoplation (type: Int64,\n                        default: 10)\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_parsebreedped.jl","page":"CLI","title":"rabbit_parsebreedped.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_parsebreedped.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_parsebreedped.jl -p PEDFILE [--fixed_nself FIXED_NSELF]\n                        [--commentstring COMMENTSTRING]\n                        [--delim DELIM] [-o OUTFILE] [-w WORKDIR] [-h]\n\nParse breed pedigree file\n\noptional arguments:\n  -p, --pedfile PEDFILE\n                        breed-format pedigree file with the first\n                        three columns: sample, pedcode, nself\n  --fixed_nself FIXED_NSELF\n                        number of selfing generations for the 3rd col\n                        = \"fixed\" (type: Int64, default: 10)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  --delim DELIM         delimiter separates each chunk of data within\n                        line string (type: AbstractChar, default: ',')\n  -o, --outfile OUTFILE\n                        output magicped-format pedigree file (default:\n                        \"magicped.csv\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_vcffilter.jl","page":"CLI","title":"rabbit_vcffilter.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_vcffilter.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_vcffilter.jl -g GENOFILE [--setmarkerid SETMARKERID]\n                        [--delsamples DELSAMPLES] [--deldupe DELDUPE]\n                        [--delmultiallelic DELMULTIALLELIC]\n                        [--delmonomorphic DELMONOMORPHIC]\n                        [--seqstrech SEQSTRECH]\n                        [--snp_maxmiss SNP_MAXMISS]\n                        [--snp_minmaf SNP_MINMAF]\n                        [--commentstring COMMENTSTRING] [-o OUTSTEM]\n                        [-w WORKDIR] [-h]\n\nFilter for biallelic markers in vcf file\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        vcf genofile\n  --setmarkerid SETMARKERID\n                        if true, set markerid in format of CHROM_POS\n                        or snp{i} with {i} being the marker index if\n                        CHROM or POS is missing. If it is nothing,\n                        setmarkerid = true only if markerid is\n                        missing.  (default: \"nothing\")\n  --delsamples DELSAMPLES\n                        list of samples to be deleted (default:\n                        \"nothing\")\n  --deldupe DELDUPE     if true, delete sucessive markers that have\n                        exactly duplicated genotypes in format of GT\n                        (type: Bool, default: false)\n  --delmultiallelic DELMULTIALLELIC\n                        delete markers with >2 alleles (type: Bool,\n                        default: true)\n  --delmonomorphic DELMONOMORPHIC\n                        delete markers with only one allele (type:\n                        Bool, default: true)\n  --seqstrech SEQSTRECH\n                        delete non-initial markers in a sequence\n                        stretch of length <= seqstretch (in bp),\n                        assuming marker are ordered by physical\n                        positions. If it is not positive, no filtering\n                        for short streches. (type: Int64, default: 0)\n  --snp_maxmiss SNP_MAXMISS\n                        delete markers with missing fraction >\n                        snp_maxmiss (type: Float64, default: 0.99)\n  --snp_minmaf SNP_MINMAF\n                        delete markers with minor allele frequency <\n                        snp_minmaf (type: Float64, default: 0.01)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  -o, --outstem OUTSTEM\n                        outstem of output files (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_resetmap.jl","page":"CLI","title":"rabbit_resetmap.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_resetmap.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_resetmap.jl -g GENOFILE --mapfile MAPFILE\n                        [--commentstring COMMENTSTRING] [-o OUTSTEM]\n                        [-w WORKDIR] [-h]\n\nReplace marker map in input genofile with that of mapfile\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        vcf genofile\n  --mapfile MAPFILE     file for marker map, it can either be in VCF\n                        format or in CSV format. For CSV-format, it\n                        must contain at least four columns: marker,\n                        chromosome poscm, physposbp. The values for\n                        the last three coloumns can be missingstring\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  -o, --outstem OUTSTEM\n                        outstem of output files (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicparse.jl","page":"CLI","title":"rabbit_magicparse.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicparse.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicparse.jl -g GENOFILE -p PEDINFO\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--formatpriority FORMATPRIORITY]\n                        [--isphysmap ISPHYSMAP]\n                        [--recomrate RECOMRATE]\n                        [--isbreedped ISBREEDPED]\n                        [--fixed_nself FIXED_NSELF]\n                        [--commentstring COMMENTSTRING]\n                        [--outext OUTEXT] [-o OUTSTEM] [-w WORKDIR]\n                        [-v VERBOSE] [-h]\n\nParse genofile and  pedfile\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --formatpriority FORMATPRIORITY\n                        priorities of genotype formats in a decreasing\n                        order (default: \"[AD,GT]\")\n  --isphysmap ISPHYSMAP\n                        if true, transform physical map into genetic\n                        map using recomrate, and overwrite the exist\n                        genetic map. If false, keep input physical\n                        and/or genetic map. (type: Bool, default:\n                        false)\n  --recomrate RECOMRATE\n                        constant recombation rate in cM/Mbp (type:\n                        Float64, default: 1.0)\n  --isbreedped ISBREEDPED\n                        if true, input pedinfo is a breedped-format\n                        file instead of magicped-format pedfile for\n                        RABBIT. If it is nothing, it is internally\n                        set. (default: \"nothing\")\n  --fixed_nself FIXED_NSELF\n                        number of selfing generations for the 3rd col\n                        = \"fixed\" (type: Int64, default: 10)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  --outext OUTEXT       extension of output genofile (default:\n                        \".vcf.gz\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicfilter.jl","page":"CLI","title":"rabbit_magicfilter.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicfilter.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicfilter.jl -g GENOFILE -p PEDINFO\n                        [--formatpriority FORMATPRIORITY]\n                        [--isphysmap ISPHYSMAP]\n                        [--recomrate RECOMRATE] [--model MODEL]\n                        [--likeparameters LIKEPARAMETERS]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--chrsubset CHRSUBSET] [--snpthin SNPTHIN]\n                        [--delmultiallelic DELMULTIALLELIC]\n                        [--del_inconsistent DEL_INCONSISTENT]\n                        [--min_subpop MIN_SUBPOP]\n                        [--min_nprogeny MIN_NPROGENY]\n                        [--snp_monosubpop SNP_MONOSUBPOP]\n                        [--snp_mono2miss SNP_MONO2MISS]\n                        [--snp_minmaf SNP_MINMAF]\n                        [--snp_maxomiss SNP_MAXOMISS]\n                        [--or_snp_maxfmiss OR_SNP_MAXFMISS]\n                        [--offspring_maxmiss OFFSPRING_MAXMISS]\n                        [--isfilterdupe ISFILTERDUPE]\n                        [--offspring_maxcorr OFFSPRING_MAXCORR]\n                        [--offspring_cutcorr OFFSPRING_CUTCORR]\n                        [--commentstring COMMENTSTRING]\n                        [--outext OUTEXT] [-o OUTSTEM] [-w WORKDIR]\n                        [-v VERBOSE] [-h]\n\nFilter markers and individuals in connected multiparental populations\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --formatpriority FORMATPRIORITY\n                        priorities of genotype formats in a decreasing\n                        order (default: \"[AD,GT]\")\n  --isphysmap ISPHYSMAP\n                        if true, transform physical map into genetic\n                        map using recomrate, and overwrite the exist\n                        genetic map. If false, keep input physical\n                        and/or genetic map. (type: Bool, default:\n                        false)\n  --recomrate RECOMRATE\n                        constant recombation rate in cM/Mbp (type:\n                        Float64, default: 1.0)\n  --model MODEL         \"depmodel\", \"indepmodel\", or \"jointmodel\"\n                        specifies prior dependence of ancestral prior\n                        process along two homologous chromosomes\n                        within an offspring (default: \"jointmodel\")\n  --likeparameters LIKEPARAMETERS\n                        Set error rate values in the genotypic data\n                        model.  (default: \"LikeParameters()\")\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --chrsubset CHRSUBSET\n                        subset of chromosomes, with nothing denoting\n                        all chromosomes,        e.g, \"[2,10]\" denotes\n                        the second and tenth chromosomes (default:\n                        \"nothing\")\n  --snpthin SNPTHIN     subset of markers by taking every snpthin-th\n                        markers (type: Int64, default: 1)\n  --delmultiallelic DELMULTIALLELIC\n                        delete markers with >2 alleles (type: Bool,\n                        default: true)\n  --del_inconsistent DEL_INCONSISTENT\n                        if true, delete markers with inconsistent\n                        changes of founder genotypes. (type: Bool,\n                        default: false)\n  --min_subpop MIN_SUBPOP\n                        delete subpopulaions with size < min_subpop\n                        (type: Int64, default: 1)\n  --min_nprogeny MIN_NPROGENY\n                        delete founder and their progeny if the number\n                        of progeny < min_nprogeny (type: Int64,\n                        default: 1)\n  --snp_monosubpop SNP_MONOSUBPOP\n                        monomorphic test for a subpopulation at a\n                        marker only if #observed genotypes >=\n                        snp_monosubpop. (type: Int64, default: 20)\n  --snp_mono2miss SNP_MONO2MISS\n                        if true, offspring genotypes in each\n                        monomorphic subpopulation are set to missing,\n                        and otherwise only inconsistent offspring\n                        genotypes are corrected. And if it is nothing,\n                        offspring genotypes are not changed. (default:\n                        \"true\")\n  --snp_minmaf SNP_MINMAF\n                        test monomorphic for a subpopulation only if\n                        its minor allele frequency (maf) < snp_minmaf.\n                        And filter for markers with maf >= snp_minmaf.\n                        (type: Float64, default: 0.05)\n  --snp_maxomiss SNP_MAXOMISS\n                        filter for markers with missing fraction in\n                        offspring <= snp_maxomiss || missing fraction\n                        in founder <  or_snp_maxfmiss (type: Float64,\n                        default: 1.0)\n  --or_snp_maxfmiss OR_SNP_MAXFMISS\n                        filter for markers with missing fraction in\n                        offspring <= snp_maxomiss || missing fraction\n                        in founder <  or_snp_maxfmiss (type: Float64,\n                        default: 0.0)\n  --offspring_maxmiss OFFSPRING_MAXMISS\n                        delete offspring if its missing fraction >\n                        offspring_maxmiss (type: Float64, default:\n                        1.0)\n  --isfilterdupe ISFILTERDUPE\n                        if true, keep only one of duplicated\n                        individuals (type: Bool, default: false)\n  --offspring_maxcorr OFFSPRING_MAXCORR\n                        two offspring are duplciated if their\n                        correlation > offspring_maxcorr (type:\n                        Float64, default: 0.99)\n  --offspring_cutcorr OFFSPRING_CUTCORR\n                        pairwise offspring correlations are set zeros\n                        if they < offspring_cutcorr (type: Float64,\n                        default: 0.4)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  --outext OUTEXT       extension of output genofile (default:\n                        \".vcf.gz\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magiccall.jl","page":"CLI","title":"rabbit_magiccall.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magiccall.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magiccall.jl -g GENOFILE -p PEDINFO [--model MODEL]\n                        [--likeparameters LIKEPARAMETERS]\n                        [--threshlikeparameters THRESHLIKEPARAMETERS]\n                        [--priorlikeparameters PRIORLIKEPARAMETERS]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--threshcall THRESHCALL]\n                        [--israwcall ISRAWCALL]\n                        [--isinfererror ISINFERERROR]\n                        [--nworker NWORKER] [--outext OUTEXT]\n                        [-o OUTSTEM] [-w WORKDIR] [-v VERBOSE] [-h]\n\nSingle marker genotype call in connected multiparental populations\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --model MODEL         \"depmodel\", \"indepmodel\", or \"jointmodel\"\n                        specifies prior dependence of ancestral prior\n                        process along two homologous chromosomes\n                        within an offspring (default: \"jointmodel\")\n  --likeparameters LIKEPARAMETERS\n                        parameters for genotypic data model. If\n                        isinfererror = true, parameters with values\n                        being nothing will be inferred.  (default:\n                        \"LikeParameters(offspringerror=0.04,peroffspringerror=0.0,alleledropout=0.0)\")\n  --threshlikeparameters THRESHLIKEPARAMETERS\n                        markers with inferred likeparameters values >\n                        threshlikeparameters values will be deleted\n                        (default:\n                        \"ThreshLikeParameters(seqerror=0.05)\")\n  --priorlikeparameters PRIORLIKEPARAMETERS\n                        priors for likelihood parameters (default:\n                        \"PriorLikeParameters(seqerror=0.005)\")\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --threshcall THRESHCALL\n                        genotye call if maximum posterior probability\n                        > threshcall (default: \"nothing\")\n  --israwcall ISRAWCALL\n                        if true, perform raw genotype calling (type:\n                        Bool, default: false)\n  --isinfererror ISINFERERROR\n                        if true, infer marker specific error rates. If\n                        it is nothing, isinfererror = !israwcall\n                        (default: \"nothing\")\n  --nworker NWORKER     number of parallel workers for computing among\n                        chromosomes (type: Int64, default: 1)\n  --outext OUTEXT       extension of output genofile (default:\n                        \".vcf.gz\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicmap.jl","page":"CLI","title":"rabbit_magicmap.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicmap.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicmap.jl -g GENOFILE -p PEDINFO [--ncluster NCLUSTER]\n                        [--minncluster MINNCLUSTER]\n                        [--maxncluster MAXNCLUSTER]\n                        [--minsilhouette MINSILHOUETTE]\n                        [--formatpriority FORMATPRIORITY]\n                        [--model MODEL]\n                        [--likeparameters LIKEPARAMETERS]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--snpthin SNPTHIN]\n                        [--ispermmarker ISPERMMARKER]\n                        [--isbinning ISBINNING]\n                        [--mincomponentsize MINCOMPONENTSIZE]\n                        [--minlodcluster MINLODCLUSTER]\n                        [--minlodorder MINLODORDER]\n                        [--knncluster KNNCLUSTER]\n                        [--knnorder KNNORDER] [--nworker NWORKER]\n                        [--commentstring COMMENTSTRING] [-o OUTSTEM]\n                        [-w WORKDIR] [-v VERBOSE] [-h]\n\nGenetic map construction in connected multiparental populations\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --ncluster NCLUSTER   number of linkage groups. If it is nothing,\n                        ncluster will be inferred in the range of\n                        [minncluster, maxncluster] (default:\n                        \"nothing\")\n  --minncluster MINNCLUSTER\n                        min number of linkage groups. If it is\n                        nothing, minncluster is set to 1 if ncluster =\n                        nothing and otherwise it is set to ncluster\n                        (default: \"nothing\")\n  --maxncluster MAXNCLUSTER\n                        max number of linkage groups. If it is\n                        nothing, maxncluster is set to 30 if ncluster\n                        = nothing and otherwise it is set to ncluster\n                        (default: \"nothing\")\n  --minsilhouette MINSILHOUETTE\n                        delete markers withg silhouette scores <\n                        minsilhouette (type: Float64, default: 0.5)\n  --formatpriority FORMATPRIORITY\n                        priorities of genotype formats in a decreasing\n                        order (default: \"[GT,AD]\")\n  --model MODEL         \"depmodel\", \"indepmodel\", or \"jointmodel\"\n                        specifies prior dependence of ancestral prior\n                        process along two homologous chromosomes\n                        within an offspring (default: \"jointmodel\")\n  --likeparameters LIKEPARAMETERS\n                        Set error rate values in the genotypic data\n                        model.  (default: \"LikeParameters()\")\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --snpthin SNPTHIN     thin markers by taking every snpthin-th\n                        markers (type: Int64, default: 1)\n  --ispermmarker ISPERMMARKER\n                        if true, permute input marker ordering (type:\n                        Bool, default: true)\n  --isbinning ISBINNING\n                        if ture, bin duplicate marker. By default,\n                        isbinning=true only if #markers > 10^4.\n                        (default: \"nothing\")\n  --mincomponentsize MINCOMPONENTSIZE\n                        connectecd components of size <\n                        mincomponentsize are removed. If it is\n                        nothing, it is internally set.  (default:\n                        \"nothing\")\n  --minlodcluster MINLODCLUSTER\n                        minimum lod score for clustering. If it is\n                        nothing, it is internally set.  (default:\n                        \"nothing\")\n  --minlodorder MINLODORDER\n                        minimum lod score for ordering. If it is\n                        nothing, it is internally set.  (default:\n                        \"nothing\")\n  --knncluster KNNCLUSTER\n                        number of nearest neighbors for clustering. If\n                        -1, it is set to the nearest integer of\n                        0.1*#markers (type: Int64, default: -1)\n  --knnorder KNNORDER   number of nearest neighbors for ordering. If\n                        -1, it is set to the nearest integer of\n                        sqrt(#markers) (type: Int64, default: -1)\n  --nworker NWORKER     number of parallel workers for computing\n                        (type: Int64, default: 1)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicmask.jl","page":"CLI","title":"rabbit_magicmask.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicmask.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicmask.jl -g GENOFILE -p PEDINFO\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--formatpriority FORMATPRIORITY]\n                        [--isphysmap ISPHYSMAP]\n                        [--recomrate RECOMRATE]\n                        [--foundermask FOUNDERMASK]\n                        [--offspringmask OFFSPRINGMASK]\n                        [--skipmarker SKIPMARKER] [--minread MINREAD]\n                        [--commentstring COMMENTSTRING]\n                        [--outext OUTEXT] [-o OUTSTEM] [-w WORKDIR]\n                        [-v VERBOSE] [-h]\n\nMask genotypes for evaluating imputation\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --formatpriority FORMATPRIORITY\n                        priorities of genotype formats in a decreasing\n                        order (default: \"[AD,GT]\")\n  --isphysmap ISPHYSMAP\n                        if true, transform physical map into genetic\n                        map using recomrate, and overwrite the exist\n                        genetic map. If false, keep input physical\n                        and/or genetic map. (type: Bool, default:\n                        false)\n  --recomrate RECOMRATE\n                        constant recombation rate in cM/Mbp (type:\n                        Float64, default: 1.0)\n  --foundermask FOUNDERMASK\n                        fraction of observed founder genotypes to be\n                        masked (type: Float64, default: 0.1)\n  --offspringmask OFFSPRINGMASK\n                        fraction of observed offspring genotypes to be\n                        masked (type: Float64, default: 0.1)\n  --skipmarker SKIPMARKER\n                        skip masking markers with offspring missing\n                        fraction >= skipmarker (type: Float64,\n                        default: 0.99)\n  --minread MINREAD     skip masking genotypes with #reads < minread\n                        (type: Int64, default: 10)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  --outext OUTEXT       extension of output genofile (default:\n                        \".vcf.gz\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicimpute.jl","page":"CLI","title":"rabbit_magicimpute.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicimpute.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicimpute.jl -g GENOFILE -p PEDINFO\n                        [--formatpriority FORMATPRIORITY]\n                        [--isphysmap ISPHYSMAP]\n                        [--recomrate RECOMRATE] [--model MODEL]\n                        [--likeparameters LIKEPARAMETERS]\n                        [--threshlikeparameters THRESHLIKEPARAMETERS]\n                        [--priorlikeparameters PRIORLIKEPARAMETERS]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--chrsubset CHRSUBSET] [--snpthin SNPTHIN]\n                        [--target TARGET]\n                        [--threshimpute THRESHIMPUTE]\n                        [--byfounder BYFOUNDER] [--mapfile MAPFILE]\n                        [--iscorrectfounder ISCORRECTFOUNDER]\n                        [--phasealg PHASEALG]\n                        [--isdelmarker ISDELMARKER]\n                        [--isinfererror ISINFERERROR]\n                        [--tukeyfence TUKEYFENCE]\n                        [--isordermarker ISORDERMARKER]\n                        [--inittemperature INITTEMPERATURE]\n                        [--coolrate COOLRATE]\n                        [--isspacemarker ISSPACEMARKER]\n                        [--trimcm TRIMCM]\n                        [--skeletonsize SKELETONSIZE]\n                        [--nworker NWORKER]\n                        [--commentstring COMMENTSTRING]\n                        [--outext OUTEXT] [-o OUTSTEM] [-w WORKDIR]\n                        [-t TEMPDIRECTORY] [-v VERBOSE] [-h]\n\nGenotype imputation in connected multiparental populations\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --formatpriority FORMATPRIORITY\n                        priorities of genotype formats in a decreasing\n                        order (default: \"[AD,GT]\")\n  --isphysmap ISPHYSMAP\n                        if true, transform physical map into genetic\n                        map using recomrate, and overwrite the exist\n                        genetic map. If false, keep input physical\n                        and/or genetic map. (type: Bool, default:\n                        false)\n  --recomrate RECOMRATE\n                        constant recombation rate in cM/Mbp (type:\n                        Float64, default: 1.0)\n  --model MODEL         \"depmodel\", \"indepmodel\", or \"jointmodel\"\n                        specifies prior dependence of ancestral prior\n                        process along two homologous chromosomes\n                        within an offspring (default: \"jointmodel\")\n  --likeparameters LIKEPARAMETERS\n                        parameters for genotypic data model. If\n                        isinfererror = true, parameters with values\n                        being nothing will be inferred.  (default:\n                        \"LikeParameters()\")\n  --threshlikeparameters THRESHLIKEPARAMETERS\n                        markers with inferred likeparameters values >\n                        threshlikeparameters values will be deleted\n                        (default: \"ThreshLikeParameters()\")\n  --priorlikeparameters PRIORLIKEPARAMETERS\n                        priors for likelihood parameters (default:\n                        \"PriorLikeParameters()\")\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --chrsubset CHRSUBSET\n                        subset of chromosomes, with nothing denoting\n                        all chromosomes,        e.g, \"[2,10]\" denotes\n                        the second and tenth chromosomes (default:\n                        \"nothing\")\n  --snpthin SNPTHIN     subset of markers by taking every snpthin-th\n                        markers (type: Int64, default: 1)\n  --target TARGET       imputing target: \"all\", \"founder\", or\n                        \"offspring\" (default: \"all\")\n  --threshimpute THRESHIMPUTE\n                        impute offspring if maximum posterior\n                        probability > threshimpute (type: Float64,\n                        default: 0.9)\n  --byfounder BYFOUNDER\n                        alternatively impute founder blocks (a\n                        parition of founders). If byfounder==-1,\n                        impute all founders simulteneously. If\n                        byfounder==0, partition is based on the\n                        founders of each subpopulation. If\n                        byfounder>0, the size of each block <=\n                        byfounder and each block is the subset of a\n                        subpopulation's founders. (type: Int64,\n                        default: 0)\n  --mapfile MAPFILE     if it is nothing, use the marker map in the\n                        input genofile, and otherwise reset genetic\n                        marker map by that in mapfile. The mapfile can\n                        either be in VCF format or in CSV format. For\n                        VCF format, genetic map is provided in the\n                        \"INFO\" column using keywords \"LINKAGEGROUP\"\n                        and \"POSCM\". For CSV-format, it must contain\n                        at least five columns: \"marker\",\n                        \"linkagegroup\", \"poscm\", \"physchrom\", and\n                        \"physposbp\", where missing values are\n                        represented by \"NA\". If there exist columns\n                        \"binno\" and \"represent\", markers with the same\n                        \"binno\" are binned with the represent being\n                        the marker with non-zero \"represent\". All the\n                        rest columns are ignored.  (default:\n                        \"nothing\")\n  --iscorrectfounder ISCORRECTFOUNDER\n                        if true, perform parental error correction. If\n                        it is nothing, iscorrectfounder=true if\n                        model=depmodel or offspring do not have\n                        genotypes in AD format (default: \"nothing\")\n  --phasealg PHASEALG   If phasealg=forwardbackward, the output\n                        diplotype probabilities (in format GP),\n                        corresonding to the phased genotypes 0|0, 0|1,\n                        1|0, and 1|1, are caculated based on the\n                        forward-backward algorithm, and the output\n                        phased offspring genotypes (in format GT) are\n                        given by those with the largest diplotype\n                        probabilities if they are greater than\n                        threshcall. If phasealg=viterbi, the output\n                        diplotype probabilities (GP) are set to those\n                        of phasealg=forwardbackward, and the output\n                        phased genotypes (GT) are caculated based on\n                        the Viterbi algorithm. If phasealg=unphase,\n                        the output genotype probabilities (GP),\n                        corresonding to the unphased genotypes 0/0,\n                        0/1, and 1/1, are calculated by transforming\n                        the posterior diplotype probabilities of\n                        phasealg=forwardbackward, and the output\n                        unphased genotypes (GT) are given by those\n                        with the largest genotype probabilities if\n                        they are greater than threshcall.  (default:\n                        \"viterbi\")\n  --isdelmarker ISDELMARKER\n                        if true, perform marker deletion (type: Bool,\n                        default: true)\n  --isinfererror ISINFERERROR\n                        if true, infer marker specific error rates.\n                        If it is nothing, isinfererror=true if model ≠\n                        depmodel or isspacemarker = true. It is\n                        necessary to set isinfererror = true for\n                        accurately imputing sequence data in\n                        heterozygous populations. (default: \"nothing\")\n  --tukeyfence TUKEYFENCE\n                        tukeyfence for detecting outlier error rates\n                        (type: Float64, default: 3.0)\n  --isordermarker ISORDERMARKER\n                        if true, refine local marker ordering, If it\n                        is nothing, isordermarker=true only if mapfile\n                        exists. (default: \"nothing\")\n  --inittemperature INITTEMPERATURE\n                        initial temperature of annealing algorithm for\n                        marker ordering. If it is nothing,\n                        inittemperature=2.0 if isordermarker and\n                        otherwise 0.0 (default: \"nothing\")\n  --coolrate COOLRATE   temperature is mutiplied by coolrate after\n                        each iteration of annealing agrogrithm (type:\n                        Float64, default: 0.7)\n  --isspacemarker ISSPACEMARKER\n                        if true, refine inter-marker distances. If it\n                        is nothing, isspacemarker=true if mapfile\n                        exists or isordermarker=true or\n                        isphysmap=true. (default: \"nothing\")\n  --trimcm TRIMCM       remove markers of each segment with distances\n                        to the flanking markers > trimcm (cM) (type:\n                        Float64, default: 20.0)\n  --skeletonsize SKELETONSIZE\n                        number of skeleton markers for piecewisely\n                        re-scaling inter-marker distances. If it is\n                        nothing, skeletonsize is set to 200 for\n                        depmdoel and otherwise 100 (default:\n                        \"nothing\")\n  --nworker NWORKER     number of parallel workers for computing among\n                        chromosomes (type: Int64, default: 1)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  --outext OUTEXT       extension of output genofile (default:\n                        \".vcf.gz\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -t, --tempdirectory TEMPDIRECTORY\n                        tempdirectory directory for intermediate\n                        results (default: tempdir())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_imputeaccuracy.jl","page":"CLI","title":"rabbit_imputeaccuracy.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_imputeaccuracy.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_imputeaccuracy.jl -f TRUEGENOFILE -g IMPUTEDGENOFILE\n                        -p PEDINFO [-o OUTSTEM] [-w WORKDIR]\n                        [-v VERBOSE] [-h]\n\nCalculate imputation accuracy per parent and per subpopulation\n\noptional arguments:\n  -f, --truegenofile TRUEGENOFILE\n                        true genofile resulting from `magicsimulate`\n                        or magicmask_reversed genofile resulting from\n                        `magicmask`\n  -g, --imputedgenofile IMPUTEDGENOFILE\n                        imputed genofile resulting from `magicimpute`\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicmask_impute.jl","page":"CLI","title":"rabbit_magicmask_impute.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicmask_impute.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicmask_impute.jl -g GENOFILE -p PEDINFO\n                        [--formatpriority FORMATPRIORITY]\n                        [--isphysmap ISPHYSMAP]\n                        [--recomrate RECOMRATE]\n                        [--foundermask FOUNDERMASK]\n                        [--offspringmask OFFSPRINGMASK]\n                        [--skipmarker SKIPMARKER] [--minread MINREAD]\n                        [--model MODEL]\n                        [--likeparameters LIKEPARAMETERS]\n                        [--threshlikeparameters THRESHLIKEPARAMETERS]\n                        [--priorlikeparameters PRIORLIKEPARAMETERS]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--chrsubset CHRSUBSET] [--snpthin SNPTHIN]\n                        [--target TARGET]\n                        [--threshimpute THRESHIMPUTE]\n                        [--byfounder BYFOUNDER] [--mapfile MAPFILE]\n                        [--iscorrectfounder ISCORRECTFOUNDER]\n                        [--phasealg PHASEALG]\n                        [--isdelmarker ISDELMARKER]\n                        [--isinfererror ISINFERERROR]\n                        [--tukeyfence TUKEYFENCE]\n                        [--isordermarker ISORDERMARKER]\n                        [--inittemperature INITTEMPERATURE]\n                        [--coolrate COOLRATE]\n                        [--isspacemarker ISSPACEMARKER]\n                        [--trimcm TRIMCM]\n                        [--skeletonsize SKELETONSIZE]\n                        [--nworker NWORKER]\n                        [--commentstring COMMENTSTRING]\n                        [--outext OUTEXT] [-o OUTSTEM] [-w WORKDIR]\n                        [-t TEMPDIRECTORY] [-v VERBOSE] [-h]\n\nGenotype masking and imputation in connected multiparental populations\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --formatpriority FORMATPRIORITY\n                        priorities of genotype formats in a decreasing\n                        order (default: \"[AD,GT]\")\n  --isphysmap ISPHYSMAP\n                        if true, transform physical map into genetic\n                        map using recomrate, and overwrite the exist\n                        genetic map. If false, keep input physical\n                        and/or genetic map. (type: Bool, default:\n                        false)\n  --recomrate RECOMRATE\n                        constant recombation rate in cM/Mbp (type:\n                        Float64, default: 1.0)\n  --foundermask FOUNDERMASK\n                        fraction of observed founder genotypes to be\n                        masked (type: Float64, default: 0.1)\n  --offspringmask OFFSPRINGMASK\n                        fraction of observed offspring genotypes to be\n                        masked (type: Float64, default: 0.1)\n  --skipmarker SKIPMARKER\n                        skip masking markers with offspring missing\n                        fraction >= skipmarker (type: Float64,\n                        default: 0.99)\n  --minread MINREAD     skip masking genotypes with #reads < minread\n                        (type: Int64, default: 10)\n  --model MODEL         \"depmodel\", \"indepmodel\", or \"jointmodel\"\n                        specifies prior dependence of ancestral prior\n                        process along two homologous chromosomes\n                        within an offspring (default: \"jointmodel\")\n  --likeparameters LIKEPARAMETERS\n                        parameters for genotypic data model. If\n                        isinfererror = true, parameters with values\n                        being nothing will be inferred.  (default:\n                        \"LikeParameters()\")\n  --threshlikeparameters THRESHLIKEPARAMETERS\n                        markers with inferred likeparameters values >\n                        threshlikeparameters values will be deleted\n                        (default: \"ThreshLikeParameters()\")\n  --priorlikeparameters PRIORLIKEPARAMETERS\n                        priors for likelihood parameters (default:\n                        \"PriorLikeParameters()\")\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --chrsubset CHRSUBSET\n                        subset of chromosomes, with nothing denoting\n                        all chromosomes,        e.g, \"[2,10]\" denotes\n                        the second and tenth chromosomes (default:\n                        \"nothing\")\n  --snpthin SNPTHIN     subset of markers by taking every snpthin-th\n                        markers (type: Int64, default: 1)\n  --target TARGET       imputing target: \"all\", \"founder\", or\n                        \"offspring\" (default: \"all\")\n  --threshimpute THRESHIMPUTE\n                        impute offspring if maximum posterior\n                        probability > threshimpute (type: Float64,\n                        default: 0.9)\n  --byfounder BYFOUNDER\n                        alternatively impute founder blocks (a\n                        parition of founders). If byfounder==-1,\n                        impute all founders simulteneously. If\n                        byfounder==0, partition is based on the\n                        founders of each subpopulation. If\n                        byfounder>0, the size of each block <=\n                        byfounder and each block is the subset of a\n                        subpopulation's founders. (type: Int64,\n                        default: 0)\n  --mapfile MAPFILE     if it is nothing, use the marker map in the\n                        input genofile, and otherwise reset genetic\n                        marker map by that in mapfile. The mapfile can\n                        either be in VCF format or in CSV format. For\n                        VCF format, genetic map is provided in the\n                        \"INFO\" column using keywords \"LINKAGEGROUP\"\n                        and \"POSCM\". For CSV-format, it must contain\n                        at least five columns: \"marker\",\n                        \"linkagegroup\", \"poscm\", \"physchrom\", and\n                        \"physposbp\", where missing values are\n                        represented by \"NA\". If there exist columns\n                        \"binno\" and \"represent\", markers with the same\n                        \"binno\" are binned with the represent being\n                        the marker with non-zero \"represent\". All the\n                        rest columns are ignored.  (default:\n                        \"nothing\")\n  --iscorrectfounder ISCORRECTFOUNDER\n                        if true, perform parental error correction. If\n                        it is nothing, iscorrectfounder=true if\n                        model=depmodel or isinfererror=true or\n                        offspring do not have genotypes in AD format\n                        (default: \"nothing\")\n  --phasealg PHASEALG   If phasealg=forwardbackward, the output\n                        diplotype probabilities (in format GP),\n                        corresonding to the phased genotypes 0|0, 0|1,\n                        1|0, and 1|1, are caculated based on the\n                        forward-backward algorithm, and the output\n                        phased offspring genotypes (in format GT) are\n                        given by those with the largest diplotype\n                        probabilities if they are greater than\n                        threshcall. If phasealg=viterbi, the output\n                        diplotype probabilities (GP) are set to those\n                        of phasealg=forwardbackward, and the output\n                        phased genotypes (GT) are caculated based on\n                        the Viterbi algorithm. If phasealg=unphase,\n                        the output genotype probabilities (GP),\n                        corresonding to the unphased genotypes 0/0,\n                        0/1, and 1/1, are calculated by transforming\n                        the posterior diplotype probabilities of\n                        phasealg=forwardbackward, and the output\n                        unphased genotypes (GT) are given by those\n                        with the largest genotype probabilities if\n                        they are greater than threshcall.  (default:\n                        \"viterbi\")\n  --isdelmarker ISDELMARKER\n                        if true, perform marker deletion (type: Bool,\n                        default: true)\n  --isinfererror ISINFERERROR\n                        if true, infer marker specific error rates.\n                        If it is nothing, isinfererror=true if model ≠\n                        depmodel or isspacemarker = true. It is\n                        necessary to set isinfererror = true for\n                        accurately imputing sequence data in\n                        heterozygous populations. (default: \"nothing\")\n  --tukeyfence TUKEYFENCE\n                        tukeyfence for detecting outlier error rates\n                        (type: Float64, default: 3.0)\n  --isordermarker ISORDERMARKER\n                        if true, refine local marker ordering. If it\n                        is nothing, isordermarker=true only if mapfile\n                        exists. (default: \"nothing\")\n  --inittemperature INITTEMPERATURE\n                        initial temperature of annealing algorithm for\n                        marker ordering. If it is nothing,\n                        inittemperature=2.0 if isordermarker and\n                        otherwise 0.0 (default: \"nothing\")\n  --coolrate COOLRATE   temperature is mutiplied by coolrate after\n                        each iteration of annealing agrogrithm (type:\n                        Float64, default: 0.7)\n  --isspacemarker ISSPACEMARKER\n                        if true, refine inter-marker distances. If it\n                        is nothing, isspacemarker=true if mapfile\n                        exists or isordermarker=true or\n                        isphysmap=true. (default: \"nothing\")\n  --trimcm TRIMCM       remove markers of each segment with distances\n                        to the flanking markers > trimcm (cM)  (type:\n                        Float64, default: 20.0)\n  --skeletonsize SKELETONSIZE\n                        number of skeleton markers for piecewisely\n                        re-scaling inter-marker distances. If it is\n                        nothing, skeletonsize is set to 200 for\n                        depmdoel and otherwise 100 (default:\n                        \"nothing\")\n  --nworker NWORKER     number of parallel workers for computing among\n                        chromosomes (type: Int64, default: 1)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  --outext OUTEXT       extension of output genofile (default:\n                        \".vcf.gz\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -t, --tempdirectory TEMPDIRECTORY\n                        tempdirectory directory for intermediate\n                        results (default: tempdir())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicreconstruct.jl","page":"CLI","title":"rabbit_magicreconstruct.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicreconstruct.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicreconstruct.jl -g GENOFILE -p PEDINFO\n                        [--formatpriority FORMATPRIORITY]\n                        [--isphysmap ISPHYSMAP]\n                        [--recomrate RECOMRATE] [--model MODEL]\n                        [--likeparameters LIKEPARAMETERS]\n                        [--isfounderinbred ISFOUNDERINBRED]\n                        [--chrsubset CHRSUBSET] [--snpthin SNPTHIN]\n                        [--hmmalg HMMALG]\n                        [--isignorephase ISIGNOREPHASE]\n                        [--nworker NWORKER]\n                        [--commentstring COMMENTSTRING] [-o OUTSTEM]\n                        [-w WORKDIR] [-t TEMPDIRECTORY]\n                        [--nplot_subpop NPLOT_SUBPOP] [-v VERBOSE]\n                        [-h]\n\nHaplotype reconstruction in connected multiparental populations\n\noptional arguments:\n  -g, --genofile GENOFILE\n                        filename for genotypic data file\n  -p, --pedinfo PEDINFO\n                        pedigree information: filename or stringcode\n  --formatpriority FORMATPRIORITY\n                        priorities of genotype formats in a decreasing\n                        order (default: \"[GP,AD,GT]\")\n  --isphysmap ISPHYSMAP\n                        if true, transform physical map into genetic\n                        map using recomrate, and overwrite the exist\n                        genetic map. If false, keep input physical\n                        and/or genetic map. (type: Bool, default:\n                        false)\n  --recomrate RECOMRATE\n                        constant recombation rate in cM/Mbp (type:\n                        Float64, default: 1.0)\n  --model MODEL         \"depmodel\", \"indepmodel\", or \"jointmodel\"\n                        specifies prior dependence of ancestral prior\n                        process along two homologous chromosomes\n                        within an offspring (default: \"jointmodel\")\n  --likeparameters LIKEPARAMETERS\n                        Set error rate values in the genotypic data\n                        model.  (default: \"LikeParameters()\")\n  --isfounderinbred ISFOUNDERINBRED\n                        if true, founders are inbred, and otherwise\n                        outbred (type: Bool, default: true)\n  --chrsubset CHRSUBSET\n                        subset of chromosomes, with nothing denoting\n                        all chromosomes,        e.g, \"[2,10]\" denotes\n                        the second and tenth chromosomes (default:\n                        \"nothing\")\n  --snpthin SNPTHIN     subset of markers by taking every snpthin-th\n                        markers (type: Int64, default: 1)\n  --hmmalg HMMALG       HMM alogrithm must be either forwardbackward\n                        or viterbi (default: \"forwardbackward\")\n  --isignorephase ISIGNOREPHASE\n                        if true, the phases of offspring genotypes are\n                        ignored. (type: Bool, default: false)\n  --nworker NWORKER     number of parallel workers for computing among\n                        chromosomes (type: Int64, default: 1)\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -t, --tempdirectory TEMPDIRECTORY\n                        tempdirectory directory for intermediate\n                        results (default: tempdir())\n  --nplot_subpop NPLOT_SUBPOP\n                        plots for up to nplot_subpop offspring in each\n                        subpopulation (type: Int64, default: 10)\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_thinancestry.jl","page":"CLI","title":"rabbit_thinancestry.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_thinancestry.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_thinancestry.jl -g ANCESTRYFILE [--thincm THINCM]\n                        [-o OUTSTEM] [-w WORKDIR] [-h]\n\nReduce ancestry results on a subset of markers such that inter-marker\ndistances <= thincm.\n\noptional arguments:\n  -g, --ancestryfile ANCESTRYFILE\n                        anncestry file resulting from magicreconstruct\n  --thincm THINCM       keep ancestry results on a subseut of markers\n                        such that inter-marker distances <= thincm. By\n                        default, thincm=0, keeping only the first of\n                        markers at the same position.  (type: Float64,\n                        default: 0.0)\n  -o, --outstem OUTSTEM\n                        outstem of output files (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"rabbit_cli/#rabbit_magicscan.jl","page":"CLI","title":"rabbit_magicscan.jl","text":"","category":"section"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"julia rabbit_magicscan.jl -h","category":"page"},{"location":"rabbit_cli/","page":"CLI","title":"CLI","text":"usage: rabbit_magicscan.jl -g ANCESTRYFILE -p PHENOFILE [-e EQUATION]\n                        [--thresholds THRESHOLDS] [--nperm NPERM]\n                        [--siglevels SIGLEVELS] [--islog10p ISLOG10P]\n                        [--missingstring MISSINGSTRING]\n                        [--commentstring COMMENTSTRING] [-o OUTSTEM]\n                        [-w WORKDIR] [-v VERBOSE] [-h]\n\nGenomic scan of QTLs in connected multiparental populations\n\noptional arguments:\n  -g, --ancestryfile ANCESTRYFILE\n                        ancestry file resulting from\n                        `magicreconstruct`\n  -p, --phenofile PHENOFILE\n                        phenotypic data file\n  -e, --equation EQUATION\n                        equation from linear model. If it is nothing,\n                        last_colname ~ 1 (default: \"nothing\")\n  --thresholds THRESHOLDS\n                        list of thresholds for QTL detection. e.g,\n                        \"[4.0]\". (default: \"nothing\")\n  --nperm NPERM         number of permutations of phenotypes  for\n                        calculating unspecified thresholds (type:\n                        Int64, default: 200)\n  --siglevels SIGLEVELS\n                        significance levels for calculating thresholds\n                        by permutations,        e.g, \"[0.05, 0.10]\".\n                        (default: \"[0.05]\")\n  --islog10p ISLOG10P   if islog10p = true, profile refers to -log10\n                        P-value, and otherwise LOD score (type: Bool,\n                        default: false)\n  --missingstring MISSINGSTRING\n                        string denotes a missing phenotypic value\n                        (default: \"NA\")\n  --commentstring COMMENTSTRING\n                        rows that begin with commentstring will be\n                        ignored (default: \"##\")\n  -o, --outstem OUTSTEM\n                        stem of output filenames (default: \"outstem\")\n  -w, --workdir WORKDIR\n                        directory for reading and writing files\n                        (default: pwd())\n  -v, --verbose VERBOSE\n                        if true, print messages on console (type:\n                        Bool, default: true)\n  -h, --help            show this help message and exit\n","category":"page"},{"location":"prepare_input/prepare_convert/#Convert-into-genofile","page":"Prepare by converting ","title":"Convert into genofile","text":"","category":"section"},{"location":"prepare_input/prepare_convert/","page":"Prepare by converting ","title":"Prepare by converting ","text":"See MagicBase.rabbitgeno_mma2jl for converting a Mathematica-version RABBIT genofile in CSV format into a julia-version RABBIT vcf genofile.\nSee MagicBase.arrayfile2vcf for converting a SNP array genofile into a vcf genofile. An array genofile is a CSV file with delim=',', consisting of one marker column plus one column for each sample. Each genotype cell is one of the combinations of alleles A, T, G, C, and - (missing allele).\nSee MagicBase.hapmap2vcf for converting a hapmap genofile into a vcf genofile. A hapmap genofile is a text file with extension \".hmp.txt\" and delim='\\t', consisting of 11 columns (rs#, alleles, chrom, pos, strand, assembly#, center, protLSID, assayLSID, panelLSID, QCcode) plus one column for each sample.  \nSee MagicBase.merge_vcffiles for merging a list of vcf genofiles into a single vcf genofile.\nSee MagicBase.merge_arrayfiles for merging a list of SNP array genofiles into a single arrayfile.","category":"page"},{"location":"prepare_input/prepare_convert/#Convert-into-pedfile","page":"Prepare by converting ","title":"Convert into pedfile","text":"","category":"section"},{"location":"prepare_input/prepare_convert/","page":"Prepare by converting ","title":"Prepare by converting ","text":"See MagicBase.rabbitped_mma2jl for converting a Mathematica-version RABBIT pedfile into a julia-version RABBIT pedfile.\nSee MagicBase.array_extract_pedfile for extracting a pedfile from an array file and a designcode for a non-subdivided population.\nSee MagicBase.vcf_extract_pedfile for extracting a pedfile from a vcf file and a designcode for a non-subdivided population.\nSee MagicBase.parsebreedped for converting a breedped file into a magicped file. A breedped file consists of three columns: individual, pedcode, and nself; the latter two columns constitute a designcode in form of breedcross (pedcode=>nself). Offspring with the same designcode forms a subpopulation. \nSee MagicBase.merge_pedfiles for merging a list of RABBIT (julia-version) pedfiles into a single pedfile.","category":"page"},{"location":"pipeline/s4_magicmap/#S4-MagicMap","page":"S4 MagicMap","title":"S4 MagicMap","text":"","category":"section"},{"location":"pipeline/s4_magicmap/#MagicMap","page":"S4 MagicMap","title":"MagicMap","text":"","category":"section"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"The magicmap sequentially performs the following:","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"Binning duplicate markers. By default, isbinning = true only if the number of markers > 10^4. magicmap will skip this step if the outfile outstem*\"_magicmap_binning.csv.gz\" already exists.\nPairwise linkage disequilibrium analysis. magicmap will skip this step if the outfile outstem*\"_magicmap_magicld.csv.gz\" already exists.\nPairwise linkage analysis. magicmap will skip this step if the outfile outstem*\"_magicmap_magiclinkage.csv.gz\" already exists.\nConstruct genetic map.","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"note: Note\nIt is recommended to repeat magicmap with different option values for map construction such as the threshold minlodcluster for clustering. If a repeat running has the same workdir and outstem, magicmap will automatically skip each of the first three steps that are time consuming by checking if the corresponding outfile exists. To avoid skipping some of the steps, manually delete the corresponding output files.","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"# code for Julia\nusing MagicMap\ncd(@__DIR__)\ngenofile = outstem*\"_magiccall_geno.vcf.gz\"\npedfile = outstem*\"_magicfilter_ped.csv\"\nmagicmap(genofile,pedfile;    \n    minncluster = 2, \n    maxncluster = 10,    \n    outstem\n)","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_magicmap.jl -g example_magiccall_geno.vcf.gz \\\n    -p example_magicfilter_ped.csv \\\n    --minncluster 2 \\\n    --maxncluster 10 \\        \n    --nworker 5 \\\n    -o example","category":"page"},{"location":"pipeline/s4_magicmap/#Output-files","page":"S4 MagicMap","title":"Output files","text":"","category":"section"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"outfile Description\noutstem*\"_magicmap.log\" log file\noutstem*\"_magicmap_binning.csv.gz\" results of pairwise duplicating\noutstem*\"_magicmap_magicld.log\" log file for pairwise LD\noutstem*\"_magicmap_magicld.csv.gz\" results of pairwise LD\noutstem*\"_magicmap_magiclinkage.log\" log file for pairwise linkage\noutstem*\"_magicmap_magiclinkage.csv.gz\" results of pairwise linkage\noutstem*\"_magicmap_construct_eigen.png\" plot eigenvalues from spectral clustering\noutstem*\"_magicmap_construct_silhouette.csv\" silhouette for each nlcuster\noutstem*\"_magicmap_construct_silhouette.png\" plot silhouette for marker grouping\noutstem*\"_magicmap_construct_LD_heatmap.png\" heatmap for pairwise LD\noutstem*\"_magicmap_construct_linkage_heatmap.png\" heatmap for pairwise linkage\noutstem*\"_magicmap_construct_map.csv.gz\" constructed mapfile for downstream analysis\noutstem*\"_magicmap_construct_compare_inputmap.png\" compare with inputmap of genofile (if exists)","category":"page"},{"location":"pipeline/s4_magicmap/#Ouput:-LD-and-linkage-heatmap","page":"S4 MagicMap","title":"Ouput: LD & linkage heatmap","text":"","category":"section"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"outstem*\"_magicmap_construct_LD_heatmap.png\" gives the heatmap for pairwise LD analyses, where LD is measured the squared allelic correlation. ","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"(Image: )","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"outstem*\"_magicmap_construct_linkage_heatmap.png\" gives the heatmap for pairwise linkage analyses, where the matrix element is 1 - scaled recombination fraction. ","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"(Image: )","category":"page"},{"location":"pipeline/s4_magicmap/#Ouput:-clustering","page":"S4 MagicMap","title":"Ouput: clustering","text":"","category":"section"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"outstem*\"_magicmap_construct_eigen.png\"  plots eigenvalues resulting from spectral clustering. The number of calculated eigenvalues is ncluster + 1 if ncluster is not nothing, and maxncluster + 1 otherwise.  The large gap between ncluster-th and (ncluster + 1)-th eigenvalues indicates a potentially good clustering; the eigenvalues are in an increasing order. ","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"(Image: )","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"outstem*\"_magicmap_construct_silhouette.png\" plots silhouette scores. The silhouette score measures the closeness between a marker and its linkage group. It ranges from -1 to 1, where a high value indicates that the marker is well matched to its linkage group. ","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"(Image: )","category":"page"},{"location":"pipeline/s4_magicmap/#Ouput:-map-comparison","page":"S4 MagicMap","title":"Ouput: map comparison","text":"","category":"section"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"outstem*\"_magicmap_construct_compare_inputmap.png\" compares constructed genetic map with the markermap in input genofile if it is not missing. ","category":"page"},{"location":"pipeline/s4_magicmap/","page":"S4 MagicMap","title":"S4 MagicMap","text":"(Image: )","category":"page"},{"location":"key_options/#Key-options","page":"Key options","title":"Key options","text":"","category":"section"},{"location":"key_options/#Genotype-formats","page":"Key options","title":"Genotype formats","text":"","category":"section"},{"location":"key_options/","page":"Key options","title":"Key options","text":"The VCF genofile allows to specify multiple genotype formats for each marker. RABBIT assumes that all markers are biallelic; multiallelic markers can be either deleted (delmultiallelic=true) or transformed into biallelic markers by pooling multiple alternative alleles. RABBIT allows three kinds of genotype formats:","category":"page"},{"location":"key_options/","page":"Key options","title":"Key options","text":"GT: discrete genotype such as \"0/1\" for unphased genotypes and \"0|1\"  for phased genotype.\nAD: allelic depth in form of \"r0,r1\", where r0 is the number of reads for allele 0 and r1 is the number of reads for allele 1.\nGP: genotype probability. It can be either in form of \"p00, p01, p11\", where p00, p01, and p11 denote the probabilities of being genotype \"0/0\", \"0/1\", and \"1/1\", respectively; or in form of \"p00, p11\" for inbred lines with only two possible homozygous genotypes (model=depmodel for magicimpute).","category":"page"},{"location":"key_options/","page":"Key options","title":"Key options","text":"RABBIT has a keyword argument formatpriority for functions requiring genofile as an argument. Specify formatpriority as a vector of formats with descreasing  priorities. To optimize the performance, the default value of formatpriority varies with function.","category":"page"},{"location":"key_options/","page":"Key options","title":"Key options","text":"Function formatpriority\nmagicfilter [\"AD\",\"GT\"]\nmagicmap [\"GT\",\"AD\"]\nmagicimpute [\"AD\",\"GT\"]\nmagicreconstruct [\"GP\",\"AD\",\"GT\"]","category":"page"},{"location":"key_options/","page":"Key options","title":"Key options","text":"note: formatpriority\nSpecify formatpriority like this --formatpriority \"[AD, GT]\" for running in a command, and formatpriority = [\"AD\", \"GT\"] for running in julia REPL.\nmagiccall performs single marker genotype calling. For each marker with AD, it first infers parental genotypes and error rates, and then exports AD, calculated GP, and called GT.\nmagicmap performs raw genotype calling for \"AD\" if skipping magiccall for sequence data. The raw genotype calling assumes a pre-specified error rate, and it performs well for almost homozygous populations, but not for sequence data from heterozygous populations.\nmagicimpute exports both posterior genotype probabilities (\"GP\") and discrete genotypes (\"GT\").\nmagicreconstruct performs generally better if using \"GP\" than that of \"GT\".","category":"page"},{"location":"key_options/#Likelihood-parameters","page":"Key options","title":"Likelihood parameters","text":"","category":"section"},{"location":"key_options/","page":"Key options","title":"Key options","text":"Genotype likelihood denotes the probability of observed genotypic data given hidden states and parameters.  The parameters include foundererror, offspringerror, seqerror, allelebalancemean, allelebalancedisperse, and alleledropout. See the section Statistical Framework.","category":"page"},{"location":"key_options/","page":"Key options","title":"Key options","text":"RABBIT has three keyword arguments likeparameters, priorlikeparameters, and threshlikeparameters, which have struct types LikeParameters, PriorLikeParameters, and TreshLikeParameters, respectively, and each of the structs has field names for the six likelihood parameters. ","category":"page"},{"location":"key_options/#LikeParameters","page":"Key options","title":"LikeParameters","text":"","category":"section"},{"location":"key_options/","page":"Key options","title":"Key options","text":"LikeParameters","category":"page"},{"location":"key_options/#MagicBase.LikeParameters","page":"Key options","title":"MagicBase.LikeParameters","text":"LikeParameters\n\nkeyword-based struct for the parameters of likelihood function. \n\nLikeParameters() is equivalent to LikeParameters(foundererror=0.005, offspringerror=nothing, peroffspringerror=nothing,  seqerror=nothing, allelebalancemean=nothing, allelebalancedisperse=nothing, alleledropout=0.0).  The peroffspringerror refers to error rate per offspring, and the other parameters refer to error rate per marker. \n\nIf genotype format is not \"AD\", the parameters seqerror, allelebalancemean, allelebalancedisperse, and alleledropout are irrelevant. \n\nIf model=\"depmodel\", the parameters allelebalancemean, allelebalancedisperse, and alleledropout are irrelevant. \n\nIf there exists keyarg isinfererror and isinfererror = true, the parameters  with values being nothing will be inferred and the other parameters will be fixed.   If isinfererror = false,  LikeParameters() is equivalent to LikeParameters(foundererror=0.005, offspringerror=0.005, peroffspringerror=0.0,  seqerror=0.001, allelebalancemean=0.5, allelebalancedisperse=0.0, alleledropout=0.0). \n\n\n\n\n\n","category":"type"},{"location":"key_options/#PriorLikeParameters","page":"Key options","title":"PriorLikeParameters","text":"","category":"section"},{"location":"key_options/","page":"Key options","title":"Key options","text":"PriorLikeParameters","category":"page"},{"location":"key_options/#MagicBase.PriorLikeParameters","page":"Key options","title":"MagicBase.PriorLikeParameters","text":"PriorLikeParameters\n\nkeyword-based struct for the priors of the likelihood parameters. \n\nFields\n\nfoundererror::Distribution = Beta(1.0,1.0): prior distribution of founder error rate\n\noffspringerror::Distribution = Beta(1.0,1.0): prior distribution of offspring error rate\n\nperoffspringerror::Distribution = Beta(1.0,1.0): prior distribution of error rate per offspring \n\nseqerror::Distribution = Beta(1.0,1.0): prior distribution of sequence base error rate\n\nallelebalancemean::Distribution = Beta(1.01,1.01) prior distribution of allele balance mean\n\nallelebalancedisperse::Distribution = Exponential(0.5): prior distribution of allele balance overdispersion\n\nalleledropout::Distribution = Beta(1,19): prior distribution of allele dropout rate\n\n\n\n\n\n","category":"type"},{"location":"key_options/#ThreshLikeParameters","page":"Key options","title":"ThreshLikeParameters","text":"","category":"section"},{"location":"key_options/","page":"Key options","title":"Key options","text":"ThreshLikeParameters","category":"page"},{"location":"key_options/#MagicBase.ThreshLikeParameters","page":"Key options","title":"MagicBase.ThreshLikeParameters","text":"ThreshLikeParameters\n\nkeyword-based struct for the thresholds of the likelihood parameters. Markers with the inferred parameter values  being greater than the maximum will be deleted. \n\nThreshLikeParameters() is equivalent to ThreshLikeParameters(foundererror=0.25, offspringerror=0.25,  peroffspringerror=0.25, seqerror=0.25, allelebalancemean=0.9, allelebalancedisperse=1.0, alleledropout=0.05). \n\n\n\n\n\n","category":"type"},{"location":"key_options/","page":"Key options","title":"Key options","text":"info: Likelihood parameters\nmagicimpute and magiccall have the three keyargs for likelihood parameters and keyarg isinfererror.\nmagicimpute has default likeparameters = LikeParameters(), priorlikeparameters=PriorLikeParameters(), and threshlikeparameters = ThreshLikeParameters()\nmagiccall has default likeparameters = LikeParameters(offspringerror=0.04, alleledropout=0.0), priorlikeparameters=PriorLikeParameters(seqerror=0.005), and threshlikeparameters = ThreshLikeParameters(seqerror=0.05)","category":"page"},{"location":"prepare_input/prepare_phenofile/#Prepare-phenofile","page":"Prepare phenofile","title":"Prepare phenofile","text":"","category":"section"},{"location":"prepare_input/prepare_phenofile/","page":"Prepare phenofile","title":"Prepare phenofile","text":"The function magicscan requires two input files: ancestryfile resulting from magicreconstruct (hmmalg = \"forwardbackward\") and phenofile. The 1st column of phenofile must be a list of offspring IDs that match those in ancestryfile. ","category":"page"},{"location":"prepare_input/prepare_phenofile/","page":"Prepare phenofile","title":"Prepare phenofile","text":"The phenofile must be a CSV file with extension \".csv \" and with commas as delimiter; no specific requirement on the column names. The columns for the phenotype and explanatory variables can be specified in the keyarg equation.","category":"page"},{"location":"prepare_input/prepare_phenofile/","page":"Prepare phenofile","title":"Prepare phenofile","text":"individual,site, phenotype\nind1, site1, 10.2\nind2, site1, 3.2\nind3, site2, 20.2\n...","category":"page"},{"location":"prepare_input/prepare_phenofile/","page":"Prepare phenofile","title":"Prepare phenofile","text":"For the above example phenofile, you may specify equation = @formula(phenotype ~ 1 + site) for julia REPL, or --equation \"phenotype ~ 1 + site\" for CLI.","category":"page"},{"location":"prepare_input/prepare_phenofile/","page":"Prepare phenofile","title":"Prepare phenofile","text":"see StatsModels.@formula for the syntax. See section Pipeline for an example of running magicscan.","category":"page"},{"location":"prepare_input/prepare_genofile/#Prepare-genofile","page":"Prepare genofile","title":"Prepare genofile","text":"","category":"section"},{"location":"prepare_input/prepare_genofile/","page":"Prepare genofile","title":"Prepare genofile","text":"The first required input for RABBIT is a genofile, which must be a vcf file with extension \".vcf\" or \".vcf.gz\". The version of vcf file format must be v4.1 or above. ","category":"page"},{"location":"prepare_input/prepare_genofile/#Include-genetic-map","page":"Prepare genofile","title":"Include genetic map","text":"","category":"section"},{"location":"prepare_input/prepare_genofile/","page":"Prepare genofile","title":"Prepare genofile","text":"A vcf file contains the physical map in the first three columns: #CHROM, POS, ID. We can provide the genetic map by adding keywords LINKAGEGROUP and POSCM in the INFO column, assuming the linkage group is #CHROM.","category":"page"},{"location":"prepare_input/prepare_genofile/","page":"Prepare genofile","title":"Prepare genofile","text":"#fileformat=VCFv4.3\n#INFO=<ID=LINKAGEGROUP,Number=1,Type=String,Description=\"Linkage group in genetic map\">\n#INFO=<ID=POSCM,Number=1,Type=Float,Description=\"Genetic marker position in centiMorgan\">\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO    FORMAT\tP1\tP2 Offspring1\nchr1\t34522\tsnp1\tN\t.\t.\t.\tLINKAGEGROUP=LG1;POSCM=0.0   GT  0/0 1/1 ./1\nchr1\t54347\tsnp2\tN\t.\t.\t.\tLINKAGEGROUP=LG1;POSCM=1.3   GT  1/1 0/0 0/1\nchr1\t66710\tsnp3\tN\t.\t.\t.\tLINKAGEGROUP=LG1;POSCM=1.5   GT  0/0 ./. 0/0","category":"page"},{"location":"prepare_input/prepare_genofile/","page":"Prepare genofile","title":"Prepare genofile","text":"See MagicMap.magicmap for constructing the genetic map. See MagicBase.resetmap for resetting the markermap for a vcf file.","category":"page"},{"location":"prepare_input/prepare_genofile/#Inferred-error-rates","page":"Prepare genofile","title":"Inferred error rates","text":"","category":"section"},{"location":"prepare_input/prepare_genofile/","page":"Prepare genofile","title":"Prepare genofile","text":"Marker specific error rates can be inferred during genotype imputation. These estimates are saved in the INFO column using additional keywords. Denote by sequence allelic balance the expected ratio of number of reads for the reference allele to the number of reads for the alternative allele. We only consider heterozygous allelic balance, which is 1/2 if there is no allelic balance bias. For example, the INFO for snp2 could be \"LINKAGEGROUP=LG1;POSCM=1.3;FOUNDERERROR=0.005;OFFSPRINGERROR=0.012;SEQERROR=0.0008;ALLELEBALANCEMEAN=0.48;ALLELEBALANCEDISPERSE=0.1;ALLELEDROPOUT=0.0\".","category":"page"},{"location":"prepare_input/prepare_genofile/","page":"Prepare genofile","title":"Prepare genofile","text":"FOUNDERERROR: allelic error rate in founders.\nOFFSPRINGERROR: allelic error rate in offspring. \nSEQERROR: sequence based error rate.\nALLELEBALANCEMEAN: mean sequence allelic balance among offspring at a marker.\nALLELEBALANCEDISPERSE: overdispersion for the distribution of sequence allelic balance among offspring.\nALLELEDROPOUT: 0- and 1-inflation for the distribution of sequence allelic balance among offspring.","category":"page"},{"location":"prepare_input/prepare_genofile/","page":"Prepare genofile","title":"Prepare genofile","text":"These keywords are also explained in the beginning comment lines of the vcf file.","category":"page"},{"location":"pipeline/s6_magicreconstruct/#S6-MagicReconstruct","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"","category":"section"},{"location":"pipeline/s6_magicreconstruct/#MagicReconstruct","page":"S6 MagicReconstruct","title":"MagicReconstruct","text":"","category":"section"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"The magicreconstruct performs haplotype reconstruction using the default HMM forward-backward algorithm (hmmalg = \"forwardbackward\"). The Viterbi algorithm (hmmalg = \"viterbi\") is also available.","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"# code for Julia\nusing MagicReconstruct\ncd(@__DIR__)\ngenofile = outstem*\"_magicimpute_geno.vcf.gz\"\npedfile = outstem*\"_magicfilter_ped.csv\"\nmagicreconstruct(genofile,pedfile;        \n    outstem     \n)","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_magicreconstruct.jl -g example_magicimpute_geno.vcf.gz \\\n    -p example_magicfilter_ped.csv \\\n    --nworker 5 \\\n    -o example","category":"page"},{"location":"pipeline/s6_magicreconstruct/#Output-files","page":"S6 MagicReconstruct","title":"Output files","text":"","category":"section"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"outfile Description\noutstem*\"_magicreconstruct.log\" log file\noutstem*\"_magicreconstruct_ancestry.csv.gz ancestry file for downstream analysis\noutstem*\"_magicreconstruct_probplots.tar tar folder of plots for conditional probabilities\noutstem*\"_magicreconstruct_posterior_recom.csv #recombinations for each offspring\noutstem*\"_magicreconstruct_posterior_recom.png statistical plot of #recombinations","category":"page"},{"location":"pipeline/s6_magicreconstruct/#Output:-plot-#breakpoints","page":"S6 MagicReconstruct","title":"Output: plot #breakpoints","text":"","category":"section"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"outstem*\"_magicreconstruct_posterior_recom.png\" is the Violin plot of the posterior distribution of the number of recombination breakpoints (per Morgan) among offspring. The x-axis denotes the prior number of recombination breakpoints.  See outstem*\"_magicreconstruct_posterior_recom.csv\" for the exact results. ","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"(Image: )","category":"page"},{"location":"pipeline/s6_magicreconstruct/#Output:-plot-inbredcoef","page":"S6 MagicReconstruct","title":"Output: plot inbredcoef","text":"","category":"section"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"The output file outstem*\"_magicreconstruct_inbredcoef.png\" is the plot of the estimated inbreeding coefficients; the red dots denote the theoretical expectation. See the output file outstem*\"_magicreconstruct_ancestry.csv.gz\" for the exact results. ","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"(Image: )","category":"page"},{"location":"pipeline/s6_magicreconstruct/#Output:-plot-condprob","page":"S6 MagicReconstruct","title":"Output: plot condprob","text":"","category":"section"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"The output file outstem*\"_magicreconstruct_ancestry.csv.gz\" saves the main results for the downstream QTL mapping. We can read the output file by MagicBase.readmagicancestry and visualize the conditional probability by MagicBase.plotcondprob. The output file outstem*\"_magicreconstruct_probplots.tar\" includes plots for up to 10 offspring per subpopulation. ","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"using Plots\nusing MagicBase\nmagicancestry = readmagicancestry(\"example_magicreconstruct_ancestry.csv.gz\")\ntruefgl = formmagicgeno(\"example_magicsimulate_truefgl.csv.gz\",\"example_magicfilter_ped.csv\");\nMagicBase.plotcondprob(magicancestry; \n    truefgl, \n    offspring=250,\n    probtype=\"diploprob\",\n    size = (850,350), \n    left_margin = 5Plots.mm\n) ","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"The plot markers (\"x\") indicate the true origin states, and the bottom vertical bars (\"|\") indicate the marker positions. ","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"MagicBase.plotcondprob(magicancestry; \n    truefgl, \n    offspring=250,\n    probtype=\"genoprob\",\n    size = (850,250), \n    left_margin = 5Plots.mm\n)","category":"page"},{"location":"pipeline/s6_magicreconstruct/","page":"S6 MagicReconstruct","title":"S6 MagicReconstruct","text":"MagicBase.plotcondprob(magicancestry; \n    truefgl, \n    offspring=250,\n    probtype=\"haploprob\",\n    size = (850,250), \n    left_margin = 5Plots.mm\n)","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/#pedfile","page":"Prepare pedinfo: pedfile","title":"pedfile","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"The second required input for RABBIT is pedinfo, providing the pedigree information of a mapping population in the form of pedfile or designcode. The pedfile is more general than designcode, since the latter can only be used for a non-divided population. The pedfile must be a CSV file with extension \".csv\" and with commas as delimiter.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"The founders and offspring in pedfile must be genotyped in genofile. The samples in genofile but not among founders and offspring in pedfile are ignored. See MagicBase.vcf_pad_samples for padding samples in genofile with all missing genotypes.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"The pedfile consists of two tables: designinfo and offspringinfo. They are separated by the key \"RABBIT\" and linked via the member column that denotes subpopulation id.  ","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/#designinfo","page":"Prepare pedinfo: pedfile","title":"designinfo","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"The designinfo can be in form of either pedigree or designcode.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/#designinfo-in-designcode","page":"Prepare pedinfo: pedfile","title":"designinfo in designcode","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"For example, consider a connected multiparental population consisting of four subpopulations: (1) double haploids (DHs), (2) two-way recombination inbred lines (RILs), (3) a three-parent population with unknown pedigree, and (4) multi-way RILs.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"using MagicBase\ncd(@__DIR__)\nmagicped = generate_magicped(;\n  designcodes=[\"P1/P2=>DH\", \"2ril-self3\", \"ibd=1.0||mapexpansion=5.0\",\"P4/3/P4//P2/P3=>3\"],\n  founders = [\"NA\",\"P1||P3\",\"P3||P4||P5\",\"NA\"],\n  subpopsizes=20*ones(4)\n)\nsavemagicped(\"example_ped_junc.csv\", magicped)","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"The following shows the designinfo in example_ped_junc.csv.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"member,designcode,founders\npop1,P1/P2=>DH,NA\npop2,2ril-self3,P1||P3\npop3,ibd=1.0||mapexpansion=5.0,P3||P4||P5\npop4,P4/3/P4//P2/P3=>3,NA","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"info: designinfo in designcode\ndesigncode can be commoncross, breedcross, or juncdist. However, for commoncross, star-like crosses \"nstar-selfm\" are not allowed.     \nThe founders of each subpopulation are joined by || and it is not necessary to specify them if the designcode is in the form of breedcross.\nIf all designcodes are in the form of breedcross, the column founders can be dropped.\nA DH population is represented internally by nself=1 in the designcode in breedcross, together with ishomozygous=true in offspringinfo.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/#designinfo-in-pedigree","page":"Prepare pedinfo: pedfile","title":"designinfo in pedigree","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"See pedfile_designcode2ped for converting pedfile with designinfo from designcode into pedigree.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"pedfile_designcode2ped(\"example_ped_junc.csv\"; outfile = \"example_ped.csv\")","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"The following shows the designinfo in the converted pedfile example_ped.csv, where the 3rd subpopulation with unknown pedigrees is dropped.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"member,mother,father\nP1,0,0\nP2,0,0\nP3,0,0\nP4,0,0\nP1/P2,P1,P2\nP1/P3,P1,P3\nP2/P3,P2,P3\npop1,P1/P2,P1/P2\n4_2,P1/P3,P1/P3\nP4//P2/P3_3,P4,P2/P3\n5_2,4_2,4_2\nP4/3/P4//P2/P3_self0_3,P4,P4//P2/P3_3\npop2,5_2,5_2\nP4/3/P4//P2/P3_self1_3,P4/3/P4//P2/P3_self0_3,P4/3/P4//P2/P3_self0_3\nP4/3/P4//P2/P3_self2_3,P4/3/P4//P2/P3_self1_3,P4/3/P4//P2/P3_self1_3\npop4,P4/3/P4//P2/P3_self2_3,P4/3/P4//P2/P3_self2_3","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"info: designinfo in pedigree\nThe mother and father of founders must be 0\nPedigree member ids must be unique. Member ids at intermediate generations do not matter.\nIf the pedigree of each subpopulation is known, designinfo in pedigree is more general than designinfo in designcode, since not every subpopulation can be represented by a designcode","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"See MagicBase.readmagicped for reading magicped. See MagicBase.plotmagicped for plotting magicped.","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"magicped = readmagicped(\"example_ped.csv\")\nplotmagicped(magicped)","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/#offspringinfo","page":"Prepare pedinfo: pedfile","title":"offspringinfo","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"The following shows the pedfile example_ped_junc.csv including both designinfo and offspringinfo.  ","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"RABBIT,designinfo\nmember,designcode,founders\npop1,P1/P2=>DH,NA\npop2,2ril-self3,P1||P3\npop3,ibd=1.0||mapexpansion=5.0,P3||P4||P5\npop4,P4/3/P4//P2/P3=>3,NA\nRABBIT,offspringinfo\nindividual,member,ishomozygous,isfglexch\npop1_1,pop1,true,false\n...\npop1_20,pop1,true,false\npop2_1,pop2,false,false\n...\npop2_20,pop2,false,false\npop3_1,pop3,true,true\n...\npop3_20,pop3,true,true\npop4_1,pop4,false,false\n...\npop4_20,pop4,false,false","category":"page"},{"location":"prepare_input/prepare_pedinfo_pedfile/","page":"Prepare pedinfo: pedfile","title":"Prepare pedinfo: pedfile","text":"info: offspringinfo\nColumns ishomozygous and isfglexch are optional with default false and the following rules:\nInternally set ishomozygous=true if nself = \"DH\" or \"FIXED\" in the designcode in form of breedcross, or ibd=1.0 in the designcode in form of juncdist.\nInternally set isfglexch=true if designcode is in form of juncdist.\nManually set isfglexch=true to account for the unknown funnel code of a subpopulation.","category":"page"},{"location":"FAQ/#Frequently-asked-questions","page":"Frequently asked questions","title":"Frequently asked questions","text":"","category":"section"},{"location":"FAQ/#General","page":"Frequently asked questions","title":"General","text":"","category":"section"},{"location":"FAQ/#How-to-account-for-funnel-code-of-MAGIC-mating-design?","page":"Frequently asked questions","title":"How to account for funnel code of MAGIC mating design?","text":"","category":"section"},{"location":"FAQ/","page":"Frequently asked questions","title":"Frequently asked questions","text":"If function code is known for each sampled offspring, then split samples into subpopulations, each having different funnel codes. If function code is unknown, set isfglexch=true in offspringinfo so that founders are assumed a priori exchangeable.","category":"page"},{"location":"FAQ/#How-to-set-keyarg-for-genetic-map-construction?","page":"Frequently asked questions","title":"How to set keyarg for genetic map construction?","text":"","category":"section"},{"location":"FAQ/","page":"Frequently asked questions","title":"Frequently asked questions","text":"It is strongly recommended to set ncluster for the number of chromosomes (linkage groups). If ncluster is not known, set the range by minncluster and maxncluster\nKeyargs  minlodcluster, ncomponent, knncluster, and clusteralg are for marker grouping, and keyargs knnorder and minlodorder for marker ordering\nThe quality of marker grouping is indicated by a large eigengap in the eigen.png plot and a large silhouette score. If repeatedly run MagicMap.magicmap, pairwise LD and linkage analysis will be skipped.\nFor accurately spacing markers, run MagicImpute.magicimpute by setting isspacemarker=true and specifying mapfile as the constructed mapfile of magicmap. ","category":"page"},{"location":"pipeline/s7_magicscan/#S7-MagicScan","page":"S7 MagicScan","title":"S7 MagicScan","text":"","category":"section"},{"location":"pipeline/s7_magicscan/#Alternative","page":"S7 MagicScan","title":"Alternative","text":"","category":"section"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"MagicScan performs QTL mapping by a single-QTL linear model via genomic scan. There exist more sophisticated methods using linear mixed models and multi-QTL models. ","category":"page"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"It is recommended to use the statgenMPP package. To use the RABBIT output for statgenMPP in R, you can use the R function readRABBITBASF in the file RABBIT4BASF\\QTLMappingStatgenMPP\\readRabbitMPPBASF.R. This function reads the output file ancestry.csv.gz from magicreconstruct into the R format suitable for use in the statgenMPP package. After importing the RABBIT data into R the function selQTLMPP can be used for the actual QTL mapping. A vignette describing the use of this function and its inputs and outputs is available here. A documented example using simulated output data is in the file RABBIT4BASF\\QTLMappingStatgenMPP\\sim_example.R. ","category":"page"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"Here are two key references for statgenMPP: Li et al. 2021 and Li et al. 2022.  For more questions, please contact: bart-jan.vanrossum@wur.nl. ","category":"page"},{"location":"pipeline/s7_magicscan/#MagicScan","page":"S7 MagicScan","title":"MagicScan","text":"","category":"section"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"note: input ancestryfile\nThe input ancestryfile can be obtained from magicreconstruct with hmmalg = \"forwardbackward\". However, the ancestryfile resulting from hmmalg = \"viterbi\" does not work for magicscan.","category":"page"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"The magicscan performs QTL mapping by scanning each marker with the simple linear model that can be specified by keyarg equation. The keyarg equation is a formula expression resulting from @formula. See StatsModels.@formula for the syntax.","category":"page"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"For the default equation = nothing, it means lastcolumn ~ 1 where lastcolumn denotes the name of last column in the phenofile. For the default threshold = nothing, the permutation method is used to calculate the threshold for QTL detection. ","category":"page"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"# code for Julia \nusing StatsModels # required for @formula\nusing MagicScan\ncd(@__DIR__)\nancestryfile = outstem*\"_magicreconstruct_ancestry.csv.gz\"\nphenofile = outstem*\"_magicsimulate_pheno.csv\"\nmagicscan(ancestryfile,phenofile;\n    equation = @formula(phenotype ~ 1 + population),\n    outstem     \n)","category":"page"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_magicscan.jl -g example_magicreconstruct_ancestry.csv.gz \\\n    -p example_magicsimulate_pheno.csv \\\n    -e \"phenotype ~ 1 + population\"  \\\n    -o example","category":"page"},{"location":"pipeline/s7_magicscan/#Output-files","page":"S7 MagicScan","title":"Output files","text":"","category":"section"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"outfile Description\noutstem*\"_magicscan.log\" log file\noutstem*\"_magicscan_perm.csv logscore at siglevels for each permutation of offspring\noutstem*\"_magicscan_profile.csv lodscore and log10 pvalue for each marker\noutstem*\"_magicscan_manhattan_qq.png Manhattan and qq plots for the scanning profile\noutstem*\"_magicscan_peak.csv detected QTL peaks","category":"page"},{"location":"pipeline/s7_magicscan/#Output:-peak","page":"S7 MagicScan","title":"Output: peak","text":"","category":"section"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"using CSV, DataFrames\nCSV.read(\"example_magicscan_peak.csv\",DataFrame;comment=\"##\")","category":"page"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"using MagicBase\ntruepheno = MagicBase.readmultitable(\"example_magicsimulate_truepheno.csv\")\ntruepheno[\"map_qtl\"]","category":"page"},{"location":"pipeline/s7_magicscan/#Output:-manhattan","page":"S7 MagicScan","title":"Output: manhattan","text":"","category":"section"},{"location":"pipeline/s7_magicscan/","page":"S7 MagicScan","title":"S7 MagicScan","text":"(Image: )","category":"page"},{"location":"pipeline/s1_magicsimulate/#S1-MagicSimulate","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/#Data-Simulation","page":"S1 MagicSimulate","title":"Data Simulation","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"Set the working directory to the directory of this file. All functions that have keyarg outstem (or outfile) have keyarg workdir, and by default workdir is the current directory (pwd()).","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"# code for Julia\ncd(@__DIR__)  ","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"For using RABBIT in CLI, use command cd WORKDIR for changing directory to the WORKDIR containing input files. ","category":"page"},{"location":"pipeline/s1_magicsimulate/#Simulate-founder-data","page":"S1 MagicSimulate","title":"Simulate founder data","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"Simulate genotypic data for 4 inbred founders with 400 markers randomly distributed over 4 chromosomes; each chromosome has length 100 cM. ","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"# code for Julia\nusing MagicSimulate\noutstem = \"example\"\nfhaplofile = outstem*\"_fhaplo.vcf.gz\"    \nsimfhaplo(;\n    isfounderinbred = true, # default\n    nsnp=400, \n    nparent=4,\n    chrlen=100*ones(4),\n    outfile=fhaplofile\n)","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"For running RABBIT in CLI, use command cd WORKDIR for change directory to the WORKDIR containing input files. ","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_simfhaplo.jl --isfounderinbred  true --nparent 4 \\\n    --chrlen \"[100,100,100,100]\" \\\n    --nsnp 300 \\    \n    -o example_fhaplo.vcf.gz","category":"page"},{"location":"pipeline/s1_magicsimulate/#Simulate-pedigree-information","page":"S1 MagicSimulate","title":"Simulate pedigree information","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"Simulate a breeding pedigree: 3 subpopulations (DH, F2, and three-parent cross) with equal size 100. ","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"# code for Julia\nusing MagicBase\nmagicped = generate_magicped(;\n  designcodes=[\"P1/P2=>DH\", \"2ril-self1\", \"P4/3/P4//P2/P3=>1\"],\n  founders = [\"NA\",\"P1||P3\",\"NA\"],\n  subpopsizes=100*ones(3)\n)\nsavemagicped(outstem*\"_ped.csv\", magicped)","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_generate_magicped.jl --designcodes  \"[P1/P2=>DH, 2ril-self1, P4/3/P4//P2/P3=>1]\"  \\\n    --founders \"[NA, P1||P3, NA]\" \\\n    --subpopsizes \"[100,100,100]\" \\\n    -o example","category":"page"},{"location":"pipeline/s1_magicsimulate/#Simulate-offspring-data","page":"S1 MagicSimulate","title":"Simulate offspring data","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"Simulate genotypic data for the example connected multiparental population. If ispheno=true, simulate phenotypic values with a specified heritability and the number of QTLs underlying the trait.","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"# code for Julia\nusing MagicSimulate\nusing Distributions\npedfile = outstem*\"_ped.csv\"\nmagicsimulate(fhaplofile,pedfile;    \n    seqfrac = 1.0,\n    seqdepth = Gamma(2,5),\n    foundermiss = Beta(1,9),\n    offspringmiss = Beta(1,9),\n    foundererror = Beta(1,19),\n    offspringerror = Beta(1,19),    \n    allelebalancemean = Beta(5,5),\n    allelebalancedisperse = Exponential(0.05),    \n    ispheno = true,\n    pheno_nqtl=1,\n    pheno_h2= 0.5,\n    isplot = true, \n    outstem\n)","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_magicsimulate.jl -g example_fhaplo.vcf.gz \\\n    -p example_ped.csv \\\n    --seqfrac 1.0 \\\n    --seqdepth Gamma(2,5) \\\n    --foundermiss Beta(1,9) \\\n    --offspringmiss Beta(1,9) \\\n    --foundererror Beta(1,19), \\\n    --offspringerror Beta(1,19) \\\n    --allelebalancemean Beta(5,5)  \\\n    --allelebalancedisperse Exponential(0.05) \\    \n    --ispheno true \\\n    --pheno_nqtl 1 \\\n    --pheno_h2 0.5 \\\n    -o example","category":"page"},{"location":"pipeline/s1_magicsimulate/#Output-files","page":"S1 MagicSimulate","title":"Output files","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"outfile Description\noutstem*\"_magicsimulate.log\" log file\noutstem*\"_magicsimulate_pheno.csv\" simulated observed phenofile\noutstem*\"_magicsimulate_geno.vcf.gz\" simulated observed genofile\noutstem*\"_magicsimulate_ped.csv\" simulated pedfile\noutstem*\"_magicsimulate_truecontfgl.csv.gz\" simulated true inheritance pattern in continuous form\noutstem*\"_magicsimulate_truecontfgl_mosaic.png\" plot genomic mosaic pattern (isplot=true)\noutstem*\"_magicsimulate_truecontfgl_recom.png\" plot distribution of #breakpoints (isplot=true)\noutstem*\"_magicsimulate_truefgl.csv.gz\" simulated true inheritance pattern at each marker\noutstem*\"_magicsimulate_truegeno.csv.gz\" simulated true genofile\noutstem*\"_magicsimulate_truepheno.csv\" simulated true phenotype values","category":"page"},{"location":"pipeline/s1_magicsimulate/#Output:-pedigree","page":"S1 MagicSimulate","title":"Output: pedigree","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"outstem*\"_magicsimulate_ped.csv\" differs from the input pedfile by transforming the designcodes into pedigree format.  outstem*\"_magicsimulate_ped.png\" gives the plot of pedigree. ","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"(Image: )","category":"page"},{"location":"pipeline/s1_magicsimulate/#Output:-mosaic","page":"S1 MagicSimulate","title":"Output: mosaic","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"outstem*\"_magicsimulate_truecontfgl_mosaic.png\" plots genomic mosaic pattern for up to 3 offspring per subpopulation. ","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"(Image: )","category":"page"},{"location":"pipeline/s1_magicsimulate/#Output:-#breakpoints","page":"S1 MagicSimulate","title":"Output: #breakpoints","text":"","category":"section"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"outstem*\"_magicsimulate_truecontfgl_recom.png\" plots distribution of #recombination breakpoints. ","category":"page"},{"location":"pipeline/s1_magicsimulate/","page":"S1 MagicSimulate","title":"S1 MagicSimulate","text":"(Image: )","category":"page"},{"location":"statistical_framework/#Statistical-framework","page":"Statistical framework","title":"Statistical framework","text":"","category":"section"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"See Zheng et al. 2014, Zheng 2015 , Zheng et al. 2015, and Zheng et al. 2018 for the detailed description on the Hidden Markov Model (HMM) framework of RABBIT.  See Zheng et al. 2018(2)  and Zheng et al. 2024 for the description on the algorithm of genotype imputation.  See Zheng et al. 2019 and Zheng et al. 2024(2) for the description on the algorithm of genetic map construction. ","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"The RABBIT HMM framework consists of two basic components: hidden Markov process and genotype data model. ","category":"page"},{"location":"statistical_framework/#Ancestral-origin-process","page":"Statistical framework","title":"Ancestral origin process","text":"","category":"section"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"The hidden Markov process refers to the prior ancestral origin process, describing how ancestral origins change along two homologous chromosomes in a diploid offspring.","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"RABBIT has a keyarg model for specifying the dependence of the prior ancestral origin processes between two homologous chromosomes. It must be \"depmodel\", \"indepmodel\", or \"jointmodel\", denoting complete dependence, complete independence, or intermediate dependence, respectively. RABBIT uses the general \"jointmodel\" by default. It is recommended for magicimpute to use \"depmodel\" for almost homozygous populations, which would be much faster than the default \"jointmodel\".","category":"page"},{"location":"statistical_framework/#Genotype-data-model","page":"Statistical framework","title":"Genotype data model","text":"","category":"section"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"The Genotype data model describes the (emission) probability of observed genotypic data given hidden ancestral origin state, and it varies with genotype format. See [Zheng et al. 2024] for the detailed description on the data model. ","category":"page"},{"location":"statistical_framework/#Discrete-genotype-(GT)","page":"Statistical framework","title":"Discrete genotype (GT)","text":"","category":"section"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"The data model for \"GT\" has a parameter describing the allelic error rate, that is, the probability of an error occurring on one allele. If an error occurs on an allele, it will result in the other allele.","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"RABBIT introduces two likelihood parameters for \"GT\": foundererror and offspringerror, denoting the allelic error rates for founders and offspring, respectively.","category":"page"},{"location":"statistical_framework/#Allelic-depeth-(AD)","page":"Statistical framework","title":"Allelic depeth (AD)","text":"","category":"section"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"Sequence reads are assumed to be generated by two steps: (1) true genotypes are mis-aligned using the random allele model with the allelic error rates foundererror and offspringerror, and (2) conditional on mis-aligned genotypes, sequence reads are sampled with parameters seqerror, allelebalancemean, allelebalancedisperse, and alleledropout.","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"We extend the binomial model such that a heterozygous genotype is modeled by a 0- and 1- inflated beta-binomial distribution. Conditional on mis-aligned genotypes, we model sequence reads as follows","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"beginaligned\nP(r0r100) = B(r0n 1-seqerror) \nP(r0r101) = textInf-BetaBin(r0n seqerror allelebalancemean allelebalancedisperse alleledropout) \nP(r0r111) = B(r0n seqerror)\nendaligned","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"where r0 is the read count for allele 0, r1 is the read count for allele 1, n=r0+r1, and B(r0np) is the binomial distribution. Conditional on heterozygous genotype, the allele 0 is dropped out and P(r0,r1|0/1) is given by P(r0,r1|1/1) with  probability alleledropout/2, the allele 1 is dropped out and P(r0,r1|0/1) is given by P(r0,r1|0/0) with probability alleledropout/2, and otherwise P(r0,r1|0/1) follows a beta-binomial distribution BetaBin(r0n alpha beta). The beta-binomial distribution can be regarded as the compound distribution that results from  r0 sim B(r0np) with p sim Beta(alpha beta), where p is the allelic balance for an offspring.  We reparameterize alpha and beta  as follows","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"beginaligned\nalpha = allelebalancemeanallelebalancedisperse \nbeta = (1-allelebalancemean)allelebalancedisperse\nendaligned","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"note: Sequence read model\nBetaBin(n alpha beta) rightarrow B(n allelebalancemean), as allelebalancedisperse rightarrow 0.\nThe sequence read model reduces to the binomial model as  as allelebalancedisperse rightarrow 0 and allelebalancemean rightarrow 05\nallelebalancemean - 05 measures allelic balance bias, and allelebalancedisperse measures allelic balance overdispersion.","category":"page"},{"location":"statistical_framework/#Referneces","page":"Statistical framework","title":"Referneces","text":"","category":"section"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"Zheng, Chaozhi, Martin P Boer, and Fred A Van Eeuwijk. 2014. “A General Modeling Framework for Genome Ancestral Origins in Multiparental Populations.” Genetics 198 (1): 87–101. https://doi.org/10.1534/genetics.114.163006. ","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"———. 2015. “Reconstruction of Genome Ancestry Blocks in Multiparental Populations.” Genetics 200 (4): 1073–87. https://doi.org/10.1534/genetics.115.177873.","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"———. 2018. “Recursive Algorithms for Modeling Genomic Ancestral Origins in a Fixed Pedigree.” G3 Genes|Genomes|Genetics 8 (10): 3231–45. https://doi.org/10.1534/G3.118.200340.","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"———. 2018(2). \"Accurate Genotype Imputation in Multiparental Populations from Low-Coverage Sequence\". Genetics 210 (1): 71-82. https://doi.org/10.1534/genetics.118.300885","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"———. 2019. \"Construction of Genetic Linkage Maps in Multiparental Populations\". Genetics 212 (4): 1031-1044. https://doi.org/10.1534/genetics.119.302229","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"Zheng et al. 2024. “Genotype imputation in connected multiparental populations.”  In preparation.","category":"page"},{"location":"statistical_framework/","page":"Statistical framework","title":"Statistical framework","text":"Zheng et al. 2024(2). \"Efficient consensus map construction in connected multiparental populations.”  In preparation. ","category":"page"},{"location":"pipeline/s5_magicimpute/#S5-MagicImpute","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"","category":"section"},{"location":"pipeline/s5_magicimpute/#MagicImpute","page":"S5 MagicImpute","title":"MagicImpute","text":"","category":"section"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"note: magicmask_impute\nmagicmask_impute combines magicmask, magicimpute, and imputeaccuracy.\nBy default, magicmask masks 10% genotypes (foundermask=0.1,offspringmask=0.1). For sequence data, mask only genotypes with read depth >= minread (minread=10).\nUse magicimpute without masking genotypes. ","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"The magicimpute first imputes founders and then imputes offspring. During the iterative founder imputation, it simultaneously performs the following:","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"Impute founder genotypes.\nDelete markers that do not fit in. By default, isdelmarker = true.\nCorrect founder genotypes. By default, iscorrectfounder = true if model=\"depmodel\" or offspring do not have genotypes in AD format`.\nInfer marker-specific error rates. By default, isinfererror = true if model is not \"depmodel\" or isspacemarker = true.\nRefine local marker ordering. By default, isordermarker = true if mapfile is not nothing.\nRefine inter-marker distances. By default, isspacemarker = true if mapfile is not nothing or isordermarker = true or isphysmap=true.","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"After founder imputation, magicimpute imputes offspring. ","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"If phasealg=forwardbackward, for each offspring at each marker, the posterior diplotype probabilities (in format GP) corresponding to the phased genotypes 0|0, 0|1, 1|0 and 1|1 are caculated according to the forward backward algorithm, and the called phased genotypes (in format GT) are given by those with the largest posterior diplotype probabilities if they are greater than threshimpute. \nIf phaselag=viterbi(default), the posterior diplotype probabilities (GP) are set as those of phasealg=forwardbackward, and the called phased genotypes (GT) are calculated according to the Viterbi algorithm. \nIf phaselag=unphase, the posterior genotype probabilities (GP) corresponding to the unphased genotypes 0/0, 0/1, and 1/1 are caculated by tranforming the posterior diplotype probabilities of phasealg=forwardbackward, and the called unphased genotypes are given by those with the largest posterior genotype probabilities if they are greater than threshimpute. ","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"# code for Julia\nusing MagicImpute\ncd(@__DIR__)\ngenofile = outstem*\"_magicfilter_geno.vcf.gz\"\npedfile = outstem*\"_magicfilter_ped.csv\"\nmagicmask_impute(genofile,pedfile;\n    mapfile = outstem*\"_magicmap_construct_map.csv.gz\",          \n    outstem     \n)","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\njulia rabbit_magicmask_impute.jl -g example_magicfilter_geno.vcf.gz \\\n    -p example_magicfilter_ped.csv \\\n    --mapfile example_magicmap_construct_map.csv.gz \\\n    --nworker 5 \\\n    -o example","category":"page"},{"location":"pipeline/s5_magicimpute/#Output-files","page":"S5 MagicImpute","title":"Output files","text":"","category":"section"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"outfile Description\noutstem*\"_magicimpute.log\" log file\noutstem*\"_magicmask_geno.vcf.gz\" genofile with some genotypes being masked\noutstem*\"_magicmask_reversed.vcf.gz\" ground-truth genofile with calculated accuracy\noutstem*\"_magicimpute_geno.vcf.gz\" result genofile for downstream analysis\noutstem*\"_magicimpute_founder.vcf.gz\" intermediate genofile after founder imputation\noutstem*\"_magicimpute_geno.vcf.gz\" result genofile for downstream analysis\noutstem*\"_magicimpute_map.csv\" result mapfile\noutstem*\"_magicimpute_inferred_error.png\" statistical plots of inferred error rates\noutstem*\"_magicimpute_compare_inputmap.png\" compare refined mapfile with keyword mapfile (if not nothing)\noutstem*\"_magicimpute_delete.csv\" collection of deleted markers\noutstem*\"_magicimpute_founderacc.csv\" imputation accuracy for each founder\noutstem*\"_magicimpute_offspringacc.csv\" imputation accuracy for each subpopulation","category":"page"},{"location":"pipeline/s5_magicimpute/#Output:-imputation-accuracy","page":"S5 MagicImpute","title":"Output: imputation accuracy","text":"","category":"section"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"outstem*\"_magicimpute_founderacc.csv\" gives imputation accuracies for each founder, and outstem*\"_magicimpute_offspringacc.csv\" gives imputation accuracies for subpopulation, assuming that masked genotypes in outstem*\"_magicmask_reversed.vcf.gz are ground truth. These output files ( + outstem*\"_magicmask_geno.vcf.gz\") do not exist for magicimpute. ","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"using CSV, DataFrames\noutstem = \"example\"\nCSV.read(outstem*\"_magicimpute_founderacc.csv\",DataFrame; comment=\"##\")","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"CSV.read(outstem*\"_magicimpute_offspringacc.csv\",DataFrame; comment=\"##\")","category":"page"},{"location":"pipeline/s5_magicimpute/#Output:-map-refinement","page":"S5 MagicImpute","title":"Output: map refinement","text":"","category":"section"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"outstem*\"_magicimpute_map.csv\" is the refined mapfile after refining local marker ordering and/or inter marker distance. outstem*\"_magicimpute_compare_inputmap.png\" compare the refined mapfile with the map of input genofile and the map of keyword mapfile (if no nothing). These output files do not exist if input map is not changed. ","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"(Image: )","category":"page"},{"location":"pipeline/s5_magicimpute/#Output:-genotyping-error","page":"S5 MagicImpute","title":"Output: genotyping error","text":"","category":"section"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"outstem*\"_magicimpute_inferred_error.png\" gives the statical plots of inferred marker specific error rates. This output does not exist if isinfererror = false. ","category":"page"},{"location":"pipeline/s5_magicimpute/","page":"S5 MagicImpute","title":"S5 MagicImpute","text":"(Image: )","category":"page"},{"location":"understand_output/#Understand-output","page":"Understand outputs","title":"Understand output","text":"","category":"section"},{"location":"understand_output/#Overview","page":"Understand outputs","title":"Overview","text":"","category":"section"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"(Image: )","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"note: Naming output files\nEach output filename can be split into: outstem, function name, individual file ID, and file extension, which are joined by underscores '_'. The first part outstem is specified via keyword outstem. \nlogfile: outstem*\"_\"*funcname*\".log\"\ngenofile: outstem*\"_\"*funcname*\"_geno.vcf.gz\"\npedfile: outstem*\"_\"*funcname*\"_ped.csv\"","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"The RABBIT output files can be categorized into four groups: ","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"logfile.   Information include input argument values, output filenames, and computational time. \ngenofile  and pedfile.  See the above flowchart and the section Prepare Inputs. \nPNG plot files. See section Pipeline  \nCSV text files (except pedfile). ","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"The main output files of MagicSimulate, MagicFilter, MagicCall, and MagicImpute are genofile and/or pedfile, which have the same formats as the input files. Most CSV output files contain a single table, each column being explained in the beginning comment lines (starting with \"##\").","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"In the following, we will mainly describe the three CSV text files that contain multiple tables: ldfile and linkagefile resulting from MagicMap and ancestryfile resulting from MagicReconstruct. In each of these files, each table starts with a row including only two cells: \"RABBIT\" and table name, followed by a header row and then content rows. ","category":"page"},{"location":"understand_output/#MagicMap","page":"Understand outputs","title":"MagicMap","text":"","category":"section"},{"location":"understand_output/#ldfile","page":"Understand outputs","title":"ldfile","text":"","category":"section"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"MagicMap performs pairwise linkage disequilibrium (LD) analyses via MagicLD.magicld. If marker binning is performed (isbinning = true), LD analyses are only for the representative markers from each bin. The output ldfile (outstem*\"_magicmap_magicld.csv.gz) contains three tables: ","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"offspringinfo: same as the offspringinfo of pedfile\nmarkerinfo: table with each row denoting a (representative) marker. It consists of 5 columns:\nmarkerno: row index starting from 1\nmarker_represent: representative marker ID \nphyschrom_represent: physical map chromosome ID for the representative marker \nphysposbp_represent: physical map position (in base pair) for the representative marker\nld_bin:  list of marker IDs in the bin containing the representative marker. \"NA\" if isbinning = false\npairwiseld: table with each row denoting LD analysis for two representative markers. It consists of 4 columns:\nmarker1: index of 1st representative marker, corresponding to markerno in table markerinfo\nmarker2: index of 2nd representative marker, corresponding to markerno in table markerinfo\nld_r2: squared allelic correlation between the two representative markers\nld_lod: LOD score of the LD analysis for the two representative markers","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"The results are saved only if ld_r2 >= minldsave and ld_lod >= minlodsave. By default, the values of keyargs minldsave and minlodsave are nothing and they are reset internally  by MagicLD.magicld according to the number of (representative) markers; see the logfile for the reset values. ","category":"page"},{"location":"understand_output/#linkagefile","page":"Understand outputs","title":"linkagefile","text":"","category":"section"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"MagicMap performs pairwise linkage analyses via MagicLinkage.magiclinkage for the pairs of (representative) marker in the ldfile. The output linkagefile (outstem*\"_magicmap_magiclinkage.csv.gz) contains three tables: ","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"offspringinfo: same as the offspringinfo of pedfile\nmarkerinfo: table with each row denoting a (representative) marker. It consists of 5 columns:\nmarkerno: row index starting from 1\nmarker: marker ID\nphyschrom: physical map chromosome ID for the marker \nphysposbp: physical map position (in base pair) for the marker    \nnmissing:  number of missing genotypes at the marker\npairwiselinkage: table with each row denoting linkage analysis for two markers. It consists of 4 columns:\nmarker1: index of 1st marker, corresponding to markerno in table markerinfo\nmarker2: index of 2nd marker, corresponding to markerno in table markerinfo\nlinkage_rf: recombination fraction between the two markers (scaled from 0 to 1)\nlinkage_lod: LOD score of the linkage analysis for the two  markers","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"The results are saved only if linkage_rf >= maxrfsave and linkage_lod >= minlodsave. By default, the value of keyarg maxrfsave and minlodsave are nothing and they are reset internally by MagicLinkage.magiclinkage according to the number of (representative) markers; see the logfile for the reset values. ","category":"page"},{"location":"understand_output/#MagicReconstruct","page":"Understand outputs","title":"MagicReconstruct","text":"","category":"section"},{"location":"understand_output/#ancestryfile","page":"Understand outputs","title":"ancestryfile","text":"","category":"section"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"The output ancestryfile (outstem*\"_magicreconstruct_ancestry.csv.gz\") is a CSV file containing 13 tables:","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"designinfo: same as the designinfo of pedfile \nfounderinfo: founder information. \nindividual: founder ID\ngender: \"notapplicable\"\noffspringinfo: same as the offspringinfo of pedfile\nfoundergeno: genotypic data for founders. Columns 1-13 are the same as those in refinedmapfile, and each of the rest columns is genotypic data for each founder.\nhaplotype: ancestral haplotype states\nhaplotypeindex: row index starting from 1\nhaploindex: haplotype index, same as haplotypeindex\nhaplotype: founder genomic labels. If a founder is inbred, its label is the founderID. If a founder is outbred, it has two labels: founderID_1 and founderID_2 for each of the two gametes. \ngenotype: ancestral genotype states\ngenotypeindex: row index starting from 1\ngenoindex: un-ordered combinations of haploindex in table haplotype\ngenotype: un-ordered combinations of haplotype in table haplotype\ndiplotype: ancestral diplotype states\ndiplotypeindex: row index starting from 1\ndiploindex: ordered combinations of haploindex in table haplotype\ndiplotype: ordered combinations of haplotype in table haplotype\ninbredcoef: inbreeding coefficient\nlinkagegroup: linkage group ID\noffspring: offspring ID\ninbredcoef: inbreeding coefficients at all markers in the linkage group for the offspring\nloglike: log likelihood for each offspring in each chromosome\nlinkagegroup: linkage group ID\n1st offpsringID: marginal log likelihood for markers in the chromosome for the offspring    \n...\nlast offpsringID","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"There are 4 more tables: haploprob, genoprob, diploprob, and viterbipath, which will be described in the following.","category":"page"},{"location":"understand_output/#ancestryfile-from-forward-backward","page":"Understand outputs","title":"ancestryfile from forward-backward","text":"","category":"section"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"In the ancestryfile resulting from the forward-backward HMM algorithm (hmmalg=\"forwardbackward\"), the main results are saved in tables haploprob, genoprob, and diploprob, and table viterbipath is nothing.","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"haploprob: haplotype probablity\nlinkagegroup: linkage group ID\noffspring: offpsring ID\nnmarker: number of rows (markers)\nnhaplotype: number of columns (haplotypes)\nmarkerindex: row index, index for marker in table foundergeno\nhaplotypeindex: column index, see table haplotype.\nhaploprob: non-zero haplotype probability, rounded to 4 digits after the decimal place.\ngenoprob: genotype probablity. It is nothing if model = \"depmodel\"\nlinkagegroup: linkage group ID\noffspring: offpsring ID\nnmarker: number of rows (markers)\nngenotype: number of columns (genotypes)\nmarkerindex: row index, index for marker in Table foundergeno\ngenotypeindex: column index, see Table genotype. \ngenoprob: non-zero genotype probability, rounded to 4 digits after the decimal place.\ndiploprob: diplotype probablity. It is nothing if model = \"depmodel\"\nlinkagegroup: linkage group ID\noffspring: offpsring ID\nnmarker: number of rows (markers)    \nndiplotype: number of columns (diplotypes)\nmarkerindex: row index, index for marker in Table foundergeno\ndiplotypeindex: column index, see Table diplotype. \ndiploprob: non-zero diplot probability, rounded to 4 digits after the decimal place.","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"info: condprob\nEach row denotes a sparse matrix of posterior probabilities for the offspring in the linkage group. Note that an offspring from a biparental sub-population has at most two non-zero probabilities, despite of many founders for the whole population.","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"For example, consider an offspring produced from 4 inbred founders, the haploprob for 8 markers in chr1 looks like","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"RABBIT, haploprob\nlinkagegroup, offspring, nmarker, nhaplotype, markerindex, haplotypeindex, haploprob\nLG1, offspring1, 8, 4, 3|6|8|1|2|3|4|6|7|1|4|5|6|7|8|2|3|5|7|8, 1|1|1|2|2|2|2|2|2|3|3|3|3|3|3|4|4|4|4|4, 0.01|0.08|0.06|0.85|0.9|0.9|0.82|0.02|0.04|0.15|0.18|0.88|0.9|0.9|0.85|0.1|0.09|0.12|0.06|0.09\n...","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"using SparseArrays\nA = [0.0 0.85 0.15 0.0\n     0.0 0.9 0.0 0.1\n     0.01 0.9 0.0 0.09\n     0.0  0.82 0.18 0.0\n     0.0  0.0  0.88 0.12\n     0.08  0.02 0.9 0.0\n     0.0   0.04 0.9  0.06\n     0.06  0.0 0.85 0.09\n     ]\nB = sparse(A)\nIs,Js, Vs = findnz(B)\nm, n = size(B)\nprintln(string(\"nmarker, nhaplotype = \", (m,n), \"\\n\",\n  \"markerindex=\",join(Is,\"|\"),\"\\n\",\n  \"haplotypeindex=\",join(Js,\"|\"), \"\\n\",\n  \"haploprob=\",join(Vs,\"|\")))","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"sparse(Is,Js,Vs,m,n)","category":"page"},{"location":"understand_output/#ancestryfile-from-Viterbi","page":"Understand outputs","title":"ancestryfile from Viterbi","text":"","category":"section"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"In the ancestryfile resulting from the Viterbi HMM algorithm (hmmalg=viterbi), the main results are saved in table viterbipath, and tables haploprob, genoprob, and diploprob are nothing.","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"info: Table viterbipath\nTable viterbipath has two columns: individual and viterbipath.\nEach row denotes the viterbi paths for all linkage groups in an offspring; paths between linkage groups are joined by \"|\".\nThe viterbi path for a linkage group in an offspring is in the form of m(1)-s(1)-m(2)-s(2)...m(k)-s(k), where m(1), m(2),..., m(k) denote the marker indices, and s(1), s(2), ..., s(k) denote the indices of HMM hidden states. Note that it always holds that m(1)=1 and m(k) = 1 + number of markers in the linkage group. The i-th segment has state s(i) that starts at m(i) and ends at m(i+1) -1.  \nIf model = depmodel, s(i) refers to haplotypeindex, and it refers to diplotypeindex for model = jointmodel or indepmodel.","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"For example, consider an offspring produced from 4 inbred parents that has two linkage groups.","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"RABBIT, viterbipath\nindividual, viterbipath\noffspring1, 1-12-96-11-101-16-122|1-16-143\n...","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"The viterbi path for the 1st linkage group is 1-12-96-11-101-16-122, meaning that segment 1 has state 12 from marker indices 1 to 95, segment 2 has state 11 from marker indices 96 to 100, and segment 3 has state 16 from marker indices 101 to 121.","category":"page"},{"location":"understand_output/","page":"Understand outputs","title":"Understand outputs","text":"The viterbi path for the 2nd linkage group is 1-16-143, a single segment has state 16 for all the 142 markers.","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/#designcode","page":"Prepare pedinfo: designcode","title":"designcode","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"The second required input for RABBIT is pedinfo, providing the pedigree information of a mapping population in form of pedfile or designcode.","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"For a non-subdivided population, pedinfo can often be provided by a string designcode. There are three kinds of designcode: commcross, breedcross, and juncdist. If pedinfo is provided by a designcode in form of commoncross or juncdist, samples in the genofile must be ordered such that founders always precede offspring. All samples in genofile are offspring, except the founders that are implied by designcode.","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"See MagicBase.parsedesign for parsing designcode into a struct. See MagicBase.vcf_extract_pedfile for extracting pedfile from a vcf genofile and a given designcode of the non-subdivided population.  ","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/#commoncross","page":"Prepare pedinfo: designcode","title":"commoncross","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"info: commoncross\n\"nril-selfm\" where \"nril\" denotes n-way recombination inbred lines (RILs), and \"selfm\" denotes m generations of inbreeding by selfing, e.g. 8ril-self4. Founders are assumed to be exchangeable when parsing the designcode.\n\"nril-sibm\" where \"nril\" denotes n-way RIL, and \"sibm\" denotes m generations of inbreeding by sibling, e.g. 8ril-sib20. Founders are assumed to be exchangeable when parsing the designcode.\n\"bcg-selfm\" where \"bcg\" denotes g generations of back cross with the first parent, and \"selfm\" denotes m generations of inbreeding by selfing, e.g. bc2-self6. \"bcg\" is the same as \"bcg-self0\", e.g. \"bc2\".\n\"nstar-selfm\" where \"nstar\" denotes star-like crosses between the first parent and each of the other parents, and \"selfm\" denotes m generations of inbreeding by selfing, e.g. 11star-self6. Note that \"nstar-selfm\" can be used in data simulation magicsimulate, but not in data analysis such as magicimpute.   ","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"using MagicBase, Pedigrees\ndesigninfo = parsedesign(\"4ril-self3\";popid=\"4RIL\")\nplotped(designinfo.pedigree)","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"designinfo = parsedesign(\"bc2-self3\"; popid=\"BC\")\nplotped(designinfo.pedigree)","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"designinfo = parsedesign(\"5star-self4\"; popid=\"star\")\nplotped(designinfo.pedigree)","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/#breedcross","page":"Prepare pedinfo: designcode","title":"breedcross","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"info: breedcross\ndesigncode for breedcross is specified in form of pedcode=>nself, where pedcode specifies the multi-way cross and nself specifies the number of selfing generations following the multi-way cross.\nEach cross is specified by \"mother/g/father\", where g is the generation of the offspring that is given by 1 + maximum of their parents' generations and the generation of a founder is set to 0. pedcode can be obtained by recursively specifying the pedcode of its parents. The  notation \"/g/\" can be simplified to \"/\" for g=1 and to \"//\" for g=2.\nnself must be a nonnegative integer, DH denoting double haploid, or FIXED denoting many generations of selfings. The DH is defined by internally setting nself=1 and ishomozygous = true for all offspring.","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"designinfo = parsedesign(\"P1/P2=>DH\"; popid=\"DH\")\nplotped(designinfo.pedigree)","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"designinfo = parsedesign(\"P1/4/P1/P2//P3/P4/3/P1/P2//P3/P4=>2\"; popid=\"breedcross\")\nplotped(designinfo.pedigree)","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/#juncdist","page":"Prepare pedinfo: designcode","title":"juncdist","text":"","category":"section"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"info: juncdist\njuncdist can be used to specify a mapping population without a known pedigree, for example, because of random mating in intermediate generations, if the average junction density such as map expansion can be estimated analytically or by simulation for given mate schemes.\njuncdist assumes that the founders in each subpopulation are exchangeable. Internally isfglexch=true is set in offspringinfo for the offspring in the subpopulation.","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"The following shows an example designcode in form of juncdist.","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"designinfo = parsedesign(\"nfounder=3||ibd=1.0||mapexpansion=5.0\")\ndesigninfo.juncdist","category":"page"},{"location":"prepare_input/prepare_pedinfo_designcode/","page":"Prepare pedinfo: designcode","title":"Prepare pedinfo: designcode","text":"See MagicPrior.magicorigin for calculating junction densities from a pedigree. ","category":"page"},{"location":"ref/#Citations","page":"Citations","title":"Citations","text":"","category":"section"},{"location":"ref/","page":"Citations","title":"Citations","text":"If you use MagicMap for genetic map construction, please cite ","category":"page"},{"location":"ref/","page":"Citations","title":"Citations","text":"Zheng et al. 2024(2). \"Efficient consensus map construction in connected multiparental populations”. In preparation.","category":"page"},{"location":"ref/","page":"Citations","title":"Citations","text":"If you use MagicImpute for genotype imputation, please cite","category":"page"},{"location":"ref/","page":"Citations","title":"Citations","text":"Zheng et al. 2024. “Genotype imputation in connected multiparental populations”.   In preparation.","category":"page"},{"location":"ref/","page":"Citations","title":"Citations","text":"If you use MagicReconstruct for haplotype reconstruction, please cite","category":"page"},{"location":"ref/","page":"Citations","title":"Citations","text":"Zheng, Chaozhi, Martin P Boer, and Fred A Van Eeuwijk. 2015. “Reconstruction of Genome Ancestry Blocks in Multiparental Populations.” Genetics 200 (4): 1073–87. https://doi.org/10.1534/genetics.115.177873.","category":"page"},{"location":"ref/","page":"Citations","title":"Citations","text":"See section Statistical framework for more references. ","category":"page"},{"location":"ref/#Acknowledgements","page":"Citations","title":"Acknowledgements","text":"","category":"section"},{"location":"ref/","page":"Citations","title":"Citations","text":"Thanks to the STW-RijkZwaan project (No. 12425) and BASF for financial supports. Thanks to Eligio Bossolini and Natasa Formanova for testing and providing valuable feedbacks! Thanks to Bart-Jan van Rossum for editing this manual!","category":"page"},{"location":"#RABBIT","page":"Home","title":"RABBIT","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A statistical pipeline for genetic analysis in connected multiparental populations","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Functions include data cleaning, map construction, genotype imputation, and haplotype reconstruction.\nApply to many multiparental populations with shared inbred (or outbred) parents \nAccount for various sequencing errors such as allelic balance bias and over-dispersion\nEfficient for genomic data with hundreds of thousands of markers","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download and install Julia available at https://julialang.org/\nDownload RABBIT repository\nIn a command shell, run","category":"page"},{"location":"","page":"Home","title":"Home","text":"path/to/bin/julia.exe path/to/RABBIT/install_RABBIT.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alteratively, from the Julia (>v1.8, 64-bit) REPL, run","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"path/to/RABBIT/install_RABBIT.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Similarly, use uninstall_RABBIT.jl for uninstalling RABBIT, up_RABBIT.jl for updating RABBIT, version_RABBIT.jl for printing the version number of each package in RABBIT, and test_RABBIT.jl for testing RABBIT (running the full test might take around one hour).","category":"page"},{"location":"#Packages","page":"Home","title":"Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a list of key packages in RABBIT: MagicBase provides functions for visualizing or summarizing results, and each of MagicSimulate, MagicFilter, MagicCall, MagicMap, MagicImpute, MagicReconstruct, and MagicScan performs a single data analysis with function name being the lowercase of the package name. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Package name Description\nMagicBase Basic data structures and functions\nMagicSimulate Simulation of genotypic/phenotypic data\nMagicFilter Filter genotypic data\nMagicCall Single marker genotype calling\nMagicMap Linkage map construction\nMagicImpute Genotype imputation\nMagicReconstruct Haplotype reconstruction\nMagicScan Genome-wide QTL scan","category":"page"},{"location":"","page":"Home","title":"Home","text":"HMM, Pedigrees, MagicPrior, MagicLD, MagicLinkage and SpectralEmbedding are supporting packages. RABBITCLI includes RABBIT's Command Line Interface (CLI). RABBITDocs is only for automatically generating documents. All packages are installed in order by running install_RABBIT.jl as described above.","category":"page"},{"location":"#Versions","page":"Home","title":"Versions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The RABBITCLI version is the same as that of RABBIT. To check the versions of the RABBIT packages, run","category":"page"},{"location":"","page":"Home","title":"Home","text":"using RABBITCLI\nrabbitversion()","category":"page"},{"location":"pipeline/s2_magicfilter/#S2-MagicFilter","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"","category":"section"},{"location":"pipeline/s2_magicfilter/#Data-filtering","page":"S2 MagicFilter","title":"Data filtering","text":"","category":"section"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"tip: filter markers\nIt is recommended to first run MagicBase.vcffilter for fast online marker filtering. ","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"The magicfilter sequentially performs the following:","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"Filter for subpopulations with size >= min_subpop. By default, min_subpop=1 (i.e. not performed).\nRemove founders (and their offspring) if their numbers of progeny < min_nprogeny. By default, min_nprogeny=1 (i.e., not performed).\nTest monomorphic for each subpopulation at each marker.\nFilter for markers with snp_missfilter(f,o) for founder missing fraction f and offspring missing fraction o.\nFilter for markers with minor allele frequency <= snp_minmaf.  \nFilter for offspring with missing fraction <= offspring_maxmiss.\nRemove duplicated offspring (isfilterdupe = true) by keeping one of them with the least missing values; a pair of offspring are duplicated if their allelic correlation >= offspring_maxcorr.","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"# code for Julia\nusing MagicFilter  \ncd(@__DIR__)       \ngenofile = outstem*\"_magicsimulate_geno.vcf.gz\"\npedfile = outstem*\"_magicsimulate_ped.csv\"\nmagicfilter(genofile,pedfile;    \n    snp_minmaf = 0.05, \n    snp_missfilter = (f,o) -> o <= 0.9 || f <= 0.1, \n    offspring_maxmiss = 0.95,  \n    isfilterdupe = true,  # default false\n    outstem\n)","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"# code for Linux shell. \n# For Window CMD, replace multiline key \\ by  ^, and replace comment-key # by ::\n# For CLI, snp_missfilter = (f,o) -> o <= snp_maxomiss || f <= or_snp_maxfmiss\njulia rabbit_magicfilter.jl -g example_magicsimulate_geno.vcf.gz \\\n    -p example_magicsimulate_ped.csv \\\n    --snp_minmaf 0.05 --snp_mono2miss true \\\n    --snp_maxomiss 0.9 \\\n    --or_snp_maxfmiss 0.1 \\\n    --offspring_maxmiss 0.95 \\\n    --isfilterdupe true \\\n    -o example","category":"page"},{"location":"pipeline/s2_magicfilter/#Output-files","page":"S2 MagicFilter","title":"Output files","text":"","category":"section"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"outfile Description\noutstem*\"_magicfilter.log\" log file\noutstem*\"_magicfilter_geno.vcf.gz\" filtered genofile for downstream analysis\noutstem*\"_magicfilter_ped.csv\" filtered pedfile for downstream analysis\noutstem*\"_magicfilter_ped.png\" plot for filtered pedfile\noutstem*\"_magicfiler_subpop_size.csv\" size of each subpopulation\noutstem*\"_magicfiler_subpop_size.png\" plot distribution of subpopulation size\noutstem*\"_magicfiler_founder_nprogeny.csv\" number of progeny for each founder\noutstem*\"_magicfiler_founder_change.csv\" changes in founder genotypes\noutstem*\"_magicfiler_ind_missing.csv\" missing fraction for founders and offspring\noutstem*\"_magicfiler_ind_missing.png\" plot distribution of missing fraction among individuals\noutstem*\"_magicfiler_snp_sum.csv\" summary of monomorphic test\noutstem*\"_magicfiler_snp_MAF.png\" plot distribution of MAF\noutstem*\"_magicfiler_snp_missing.png\" plot distribution of missing fraction among markers","category":"page"},{"location":"pipeline/s2_magicfilter/#Output:-empirical-CDF-of-MAF","page":"S2 MagicFilter","title":"Output: empirical CDF of MAF","text":"","category":"section"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"outstem*\"_magicfilter_snp_MAF.png\" plots the empirical cumulative distribution function (CDF) of MAF per marker. See outstem*\"_magicfilter_snp_sum.csv\" for the exact results. The MAF is calculated among offspring for each marker. The red dot indicates the fraction of removed markers for the given threshold snp_minmaf = 0.05.  ","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"(Image: )","category":"page"},{"location":"pipeline/s2_magicfilter/#Output:-empirical-CDF-of-missing-fraction-per-marker","page":"S2 MagicFilter","title":"Output: empirical CDF of missing fraction per marker","text":"","category":"section"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"outstem*\"_magicfilter_snp_missing.png\" plots the empirical CDF of missing fraction per marker for founders and offspring, respectively. See  outstem*\"_magicfilter_snp_sum.csv\" for the exact results. ","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"(Image: )","category":"page"},{"location":"pipeline/s2_magicfilter/#Output:-empirical-CDF-of-missing-fraction-per-individual","page":"S2 MagicFilter","title":"Output: empirical CDF of missing fraction per individual","text":"","category":"section"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"outstem*\"_magicfilter_ind_missing.png\" plots the empirical CDF of missing fraction per individual. See  outstem*\"_magicfilter_ind_missing.csv\" for the exact results.  The red dot indicates 1 - fraction of removed markers for the given threshold offspring_maxmiss. ","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"(Image: )","category":"page"},{"location":"pipeline/s2_magicfilter/#Output:-offspring-duplicate","page":"S2 MagicFilter","title":"Output: offspring duplicate","text":"","category":"section"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"outstem*\"_magicfilter_ind_correlation.png\" gives the heatmap of allelic correlation for each pair of offspring. A pair of offspring is assumed to be duplicated if their correlation > offspring_maxmiss. By default, offspring_maxmiss = 0.99.  These output files are produced only if isfilterdupe = true. ","category":"page"},{"location":"pipeline/s2_magicfilter/","page":"S2 MagicFilter","title":"S2 MagicFilter","text":"(Image: )","category":"page"}]
}
